import{_ as t,c as a,o as r,ai as i}from"./chunks/framework.Dyijs88g.js";const m=JSON.parse('{"title":"What is Becsy?","description":"","frontmatter":{"sidebarDepth":3},"headers":[],"relativePath":"guide/introduction.md","filePath":"guide/introduction.md","lastUpdated":1740906479000}'),s={name:"guide/introduction.md"};function o(n,e,l,c,h,d){return r(),a("div",null,e[0]||(e[0]=[i('<h1 id="what-is-becsy" tabindex="-1">What is Becsy? <a class="header-anchor" href="#what-is-becsy" aria-label="Permalink to &quot;What is Becsy?&quot;">​</a></h1><p>Becsy is an Entity Component System (ECS) framework for TypeScript and JavaScript that makes it nearly effortless to write performant, multi-threaded code. It&#39;s inspired by <a href="https://github.com/ecsyjs/ecsy" target="_blank" rel="noreferrer">ECSY</a> and <a href="https://github.com/NateTheGreatt/bitECS" target="_blank" rel="noreferrer">bitecs</a>, and guided by <a href="https://ajmmertens.medium.com/why-vanilla-ecs-is-not-enough-d7ed4e3bebe5" target="_blank" rel="noreferrer">ideas from Flecs</a>.</p><div class="danger custom-block"><p class="custom-block-title">DANGER</p><p>Becsy is currently in 0.x status. What&#39;s there is reasonably well tested but many features are still missing and you can expect frequent API changes. Most importantly, <strong>multi-threading is not yet implemented</strong>.</p></div><h2 id="priorities" tabindex="-1">Priorities <a class="header-anchor" href="#priorities" aria-label="Permalink to &quot;Priorities&quot;">​</a></h2><p>Becsy positions itself within the wider ecosystem of ECS frameworks with the following set of priorities:</p><ol><li>Multi-threaded: all apps developed with Becsy can be effectively run on multiple threads with minimal or no modifications from their single-threaded version. I believe that multi-threading is the only way to scale performance and that ECS is the ideal architecture for making multi-threading effortless and practical in JavaScript.</li><li>Ergonomic: the API is powerful, expressive, and safe, rather than minimal or low-level. I believe that developers choose TypeScript / JavaScript because it&#39;s a high level language, where they can express ideas quickly and succinctly. If they need to prioritize performance they&#39;ll pick a language and ECS implementation better suited to that objective.</li><li>Performant: the point above notwithstanding, Becsy does its best not to unnecessarily leave potential performance on the table. I believe that a good ECS should be usable for more than just toy apps.</li></ol><p>The priorities above are ordered from most to least important. This means that I&#39;ll sacrifice ergonomics if required to support multi-threading, and accept decreased performance in favor of a better API.</p><h2 id="features" tabindex="-1">Features <a class="header-anchor" href="#features" aria-label="Permalink to &quot;Features&quot;">​</a></h2><p>From ECSY we take:<br> ✅ a friendly object-oriented API for both JS and TS clients<br> ✅ multiple queries per system<br> ✅ reactive queries (rather than event callbacks)<br> ✅ explicit mutation tracking<br> ✅ references to native JS objects in components<br> ✅ comprehensive docs<br></p><p>From bitecs we take:<br> ✅ extensive use of <code>ArrayBuffer</code> for performance<br> ✅ a sparse array architecture<br> ✅ Node and browser compatibility with no dependencies<br></p><p>Then we add:<br> ✅ a native TypeScript implementation<br> ✅ selectable component storage strategies<br> ✅ bidirectional entity references with strong referential integrity<br> ✅ declarative system ordering based on data dependencies<br> ✅ coroutines for more natural multi-stage workflows<br> ✅ built-in support for representing state machines (per <a href="https://ajmmertens.medium.com/why-storing-state-machines-in-ecs-is-a-bad-idea-742de7a18e59" target="_blank" rel="noreferrer">Sander Mertens</a>)<br> ✅ weak references to native JS objects, for better integration with other frameworks<br></p><p>Still to come:<br> ⬜ multithreaded system execution<br> ⬜ an optional but nicely integrated networked data replication system<br></p><h2 id="support" tabindex="-1">Support <a class="header-anchor" href="#support" aria-label="Permalink to &quot;Support&quot;">​</a></h2><p>I&#39;m actively supporting this package but it&#39;s not my primary job, so responses may take 24-48 hours and fixes up to 1-2 weeks (but usually much faster). Please open <a href="https://github.com/lastolivegames/becsy/issues" target="_blank" rel="noreferrer">issues</a> against the repo, and <a href="https://discord.gg/X72ct6hZSr" target="_blank" rel="noreferrer">join us on Discord</a> for help and fun discussions!</p><h2 id="showcase" tabindex="-1">Showcase <a class="header-anchor" href="#showcase" aria-label="Permalink to &quot;Showcase&quot;">​</a></h2><p>Here are some public creations that use Becsy:</p><ul><li><a href="https://www.special-releases.com/" target="_blank" rel="noreferrer">Special Releases 2022</a></li><li><a href="https://moyosaspaces.com/" target="_blank" rel="noreferrer">Moyosa Spaces</a></li><li><a href="https://www.atlassian.com/software/confluence/whiteboards" target="_blank" rel="noreferrer">Confluence whiteboards</a></li><li><a href="https://crayon.town/" target="_blank" rel="noreferrer">Crayon Town</a></li></ul><h2 id="acknowledgements" tabindex="-1">Acknowledgements <a class="header-anchor" href="#acknowledgements" aria-label="Permalink to &quot;Acknowledgements&quot;">​</a></h2><p>Many thanks to Becsy&#39;s early users, who helped shape the feature set and API, and found tons of bugs! Thanks to <a href="https://github.com/ecsyjs/ecsy" target="_blank" rel="noreferrer">ECSY</a> for the inspiration and their fine documentation, which served as the starting point for this site. And thanks to <a href="https://www.instagram.com/lemonikate/" target="_blank" rel="noreferrer">Kate Liu</a> for the logo design!</p>',19)]))}const u=t(s,[["render",o]]);export{m as __pageData,u as default};
