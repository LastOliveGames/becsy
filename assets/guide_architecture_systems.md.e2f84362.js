import{_ as s,c as a,a as t,b as e,o as p,r as o}from"./app.d08bd159.js";const f='{"title":"Systems","description":"","frontmatter":{},"headers":[{"level":2,"title":"Defining systems","slug":"defining-systems"},{"level":2,"title":"System lifecycle","slug":"system-lifecycle"},{"level":2,"title":"Execution order","slug":"execution-order"},{"level":2,"title":"Grouping systems","slug":"grouping-systems"},{"level":2,"title":"Attaching systems","slug":"attaching-systems"},{"level":2,"title":"Singleton components","slug":"singleton-components"},{"level":2,"title":"Coroutines","slug":"coroutines"}],"relativePath":"guide/architecture/systems.md","lastUpdated":1665986664000}',c={},l=e(`<h1 id="systems" tabindex="-1">Systems <a class="header-anchor" href="#systems" aria-hidden="true">#</a></h1><p>Systems are used to transform data stored on the components. Usually each system defines one or more <a href="./queries.html">queries</a> of entities and iterates through these lists once per frame to create, remove or modify entities and components.</p><p><img src="https://ecsy.io/docs/manual/images/systems.svg" alt=""></p><h2 id="defining-systems" tabindex="-1">Defining systems <a class="header-anchor" href="#defining-systems" aria-hidden="true">#</a></h2><p>Each system is defined as a class with a public default constructor that extends <code>System</code>:</p><div class="language-ts"><pre><code><span class="token decorator"><span class="token at operator">@</span><span class="token function">system</span></span> <span class="token keyword">class</span> <span class="token class-name">MySystem</span> <span class="token keyword">extends</span> <span class="token class-name">System</span> <span class="token punctuation">{</span>
  <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>
    <span class="token comment">// do some work here</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><div class="language-js"><pre><code><span class="token keyword">class</span> <span class="token class-name">MySystem</span> <span class="token keyword">extends</span> <span class="token class-name">System</span> <span class="token punctuation">{</span>
  <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>
    <span class="token comment">// do some work here</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><div class="only-ts"><p>The optional <code>@system</code> decorator will automatically register the system with the world when you create it. If you omit the decorator then you&#39;ll need to include the system class in the <a href="./world.html#options">world&#39;s <code>defs</code></a> one way or another.</p></div><div class="only-js"><p>To make the world aware of your system so it&#39;ll be excuted, you&#39;ll need to include the system class in the <a href="./world.html#options">world&#39;s <code>defs</code></a> one way or another.</p></div><p>While your constructors can&#39;t take any arguments, if you pass a system into <code>defs</code> you can optionally include values for any custom properties you&#39;d like to initialize:</p><div class="language-ts"><pre><code><span class="token keyword">const</span> world <span class="token operator">=</span> World<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">{</span>defs<span class="token operator">:</span> <span class="token punctuation">[</span>
  AnotherSystem<span class="token punctuation">,</span>
  MySystem<span class="token punctuation">,</span> <span class="token punctuation">{</span>defaultSpeed<span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">,</span> message<span class="token operator">:</span> <span class="token string">&#39;too fast!&#39;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><div class="language-js"><pre><code><span class="token keyword">const</span> world <span class="token operator">=</span> World<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">defs</span><span class="token operator">:</span> <span class="token punctuation">[</span>
  AnotherSystem<span class="token punctuation">,</span>
  MySystem<span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token literal-property property">defaultSpeed</span><span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token string">&#39;too fast!&#39;</span><span class="token punctuation">}</span>
<span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>You can&#39;t remove a system from the world but there are ways to <a href="./world.html#partial-execution">control which systems are executed</a>.</p><h2 id="system-lifecycle" tabindex="-1">System lifecycle <a class="header-anchor" href="#system-lifecycle" aria-hidden="true">#</a></h2><p>When the world is created it will instantiate a copy of every system. The only work you should do in your constructor is to define the system&#39;s <a href="#execution-order">schedule</a>, create the <a href="./queries.html">queries</a> it needs, and declare any <a href="#attached-systems">attachments</a> and <a href="#singletons">singletons</a>.</p><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>In multi-threading scenarios a system may be instantiated more than once so don&#39;t do anything that has side-effects in the constructor.</p></div><p>A system will then go through a lifecycle over the lifetime of the world, that you can hook into by overriding any of the following methods:</p><div class="language-ts"><pre><code><span class="token decorator"><span class="token at operator">@</span><span class="token function">system</span></span> <span class="token keyword">class</span> <span class="token class-name">MySystem</span> <span class="token keyword">extends</span> <span class="token class-name">System</span> <span class="token punctuation">{</span>
  <span class="token keyword">async</span> <span class="token function">prepare</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token keyword">void</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
  <span class="token function">initialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
  <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
  <span class="token function">finalize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><div class="language-js"><pre><code><span class="token keyword">class</span> <span class="token class-name">MySystem</span> <span class="token keyword">extends</span> <span class="token class-name">System</span> <span class="token punctuation">{</span>
  <span class="token function">prepare</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token comment">// returns a promise</span>
  <span class="token function">initialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
  <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
  <span class="token function">finalize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>First, the world will apply any <a href="#attached-systems">attachment</a> and <a href="#singletons">singleton</a> directives, so those will be available in all the hooks.</p><p>The world will then invoke <code>prepare</code>, which is the only <code>async</code> hook and can be used for loading external data or setting up some external context. You should save any results you&#39;ll need later in your own properties on the system instance. In this phase the system cannot yet create or access entities.</p><p>After that comes <code>initialize</code>. This is a synchronous hook and can be used to initialize the system and its own little corner of the world. This is usually where you&#39;ll seed the world with initial entities, add event listeners, etc. Queries are not yet accessible in this phase.</p><p>For the bulk of the system&#39;s life, every time the world is executed (<a href="./world.html#partial-execution">usually</a> once per frame) it will invoke <code>execute</code> on the system. This is where you iterate over the results of <a href="./queries.html">queries</a>, create entities, mutate components, drive external systems (such as a renderer), etc. If your computation is time-dependent you can use the current time and delta since the last frame:</p><div class="language-ts"><div class="highlight-lines"><br><br><br><br><div class="highlighted">\xA0</div><div class="highlighted">\xA0</div><br><br><br></div><pre><code><span class="token decorator"><span class="token at operator">@</span><span class="token function">system</span></span> <span class="token keyword">class</span> <span class="token class-name">MySystem</span> <span class="token keyword">extends</span> <span class="token class-name">System</span> <span class="token punctuation">{</span>
  <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> speed <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>player<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>Speed<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> position <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>player<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>Position<span class="token punctuation">)</span><span class="token punctuation">;</span>
    position<span class="token punctuation">.</span>value <span class="token operator">+=</span> speed<span class="token punctuation">.</span>value <span class="token operator">*</span> <span class="token keyword">this</span><span class="token punctuation">.</span>delta<span class="token punctuation">;</span>
    position<span class="token punctuation">.</span>lastUpdated <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>time<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><div class="language-js"><div class="highlight-lines"><br><br><br><br><div class="highlighted">\xA0</div><div class="highlighted">\xA0</div><br><br><br></div><pre><code><span class="token keyword">class</span> <span class="token class-name">MySystem</span> <span class="token keyword">extends</span> <span class="token class-name">System</span> <span class="token punctuation">{</span>
  <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> speed <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>player<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>Speed<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> position <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>player<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>Position<span class="token punctuation">)</span><span class="token punctuation">;</span>
    position<span class="token punctuation">.</span>value <span class="token operator">+=</span> speed<span class="token punctuation">.</span>value <span class="token operator">*</span> <span class="token keyword">this</span><span class="token punctuation">.</span>delta<span class="token punctuation">;</span>
    position<span class="token punctuation">.</span>lastUpdated <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>time<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>The time and delta are computed automatically by default but you can override them with your preferred values when calling <code>world.execute</code>.</p><p>Finally, if you explicitly terminate the world, <code>finalize</code> will be called. This is useful for disentangling yourself from any external systems, e.g. by removing listeners. There&#39;s no point in deleting entities here since the world is about to be destroyed anyway.</p><h2 id="execution-order" tabindex="-1">Execution order <a class="header-anchor" href="#execution-order" aria-hidden="true">#</a></h2><p>What order will your systems be executed in? In principle, it doesn&#39;t matter, since if one system makes a change that a preceding system needs it&#39;ll just have to wait until the next frame to act on it. The computation continually converges towards a point where every system has seen every relevant change.</p><p>In practice, though, this would lead to unacceptable latency in propagating changes through your systems, so we want to order their execution such that all changes are fully processed in a single frame whenever possible. In other ECS libraries this is typically done by registering the systems in the desired order of execution or by setting system priorities. We take a different approach.</p><p>Becsy lets you declare a partial order on your systems through powerful precedence directives, leading to an acyclic graph of systems that can be automatically linearized for single-threaded execution. This is more complex than explicitly specifying the exact order but it allows for efficient mapping onto multi-threaded execution, and also lets you integrate third party system packages without needing to understand their internal ordering constraints.</p><p>Each system can specify its ordering constraints via a schedule builder:</p><div class="language-ts"><pre><code><span class="token decorator"><span class="token at operator">@</span><span class="token function">system</span></span><span class="token punctuation">(</span>
  s <span class="token operator">=&gt;</span> s<span class="token punctuation">.</span><span class="token function">before</span><span class="token punctuation">(</span>SystemB<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">afterWritesTo</span><span class="token punctuation">(</span>ComponentFoo<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">inAnyOrderWith</span><span class="token punctuation">(</span>physicsSystems<span class="token punctuation">)</span>
<span class="token punctuation">)</span> <span class="token keyword">class</span> <span class="token class-name">SystemA</span> <span class="token keyword">extends</span> <span class="token class-name">System</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre></div><div class="language-js"><pre><code><span class="token keyword">class</span> <span class="token class-name">SystemA</span> <span class="token keyword">extends</span> <span class="token class-name">System</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">schedule</span><span class="token punctuation">(</span>
      <span class="token parameter">s</span> <span class="token operator">=&gt;</span> s<span class="token punctuation">.</span><span class="token function">before</span><span class="token punctuation">(</span>SystemB<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">afterWritesTo</span><span class="token punctuation">(</span>ComponentFoo<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">inAnyOrderWith</span><span class="token punctuation">(</span>physicsSystems<span class="token punctuation">)</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><div class="only-ts"><p>(If needed, you can call <code>this.schedule</code> from your constructor instead.)</p></div><p>The scheduling constraints apply pairwise to the subject system and all other systems listed in the constraint. More specific constraints override less specific ones on a per-system-pair basis. Here&#39;s a list of the supported constraint clauses from most to least specific:</p><table><thead><tr><th>Constraints</th><th>Effect</th></tr></thead><tbody><tr><td><code>before</code>, <code>after</code></td><td>Forces the system to execute any time (not necessarily immediately) before or after the given systems. This is the strongest constraint.</td></tr><tr><td><code>inAnyOrderWith</code></td><td>Negates all less specific constraints, allowing the system to execute in any order with the given ones. Doesn&#39;t affect ordering between the given systems, though.</td></tr><tr><td><code>beforeReadersOf</code>, <code>afterReadersOf</code>, <code>beforeWritersOf</code>, <code>afterWritersOf</code></td><td>Specifies that the system should execute before or after all other systems that read or write components of the given types.</td></tr><tr><td><code>inAnyOrderWithReadersOf</code>, <code>inAnyOrderWithWritersOf</code></td><td>Negates all automatically formed constraints, allowing the system to execute in any order with systems that read or write components of the given types. This is useful for resolving spurious ordering conflicts caused by overlapping entitlements.</td></tr><tr><td>system entitlements</td><td><a href="./queries.html#declaring-entitlements">System entitlements</a> to read or write certain component types are used to automatically form a basic layer of constraints, such that all systems that read a component execute after all systems that write it.</td></tr></tbody></table><p>To give a concrete example, consider the following schedule and entitlement declarations:</p><div class="language-ts"><pre><code><span class="token decorator"><span class="token at operator">@</span><span class="token function">system</span></span><span class="token punctuation">(</span>s <span class="token operator">=&gt;</span> s<span class="token punctuation">.</span><span class="token function">after</span><span class="token punctuation">(</span><span class="token constant">C</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">class</span> <span class="token class-name"><span class="token constant">A</span></span> <span class="token keyword">extends</span> <span class="token class-name">System</span> <span class="token punctuation">{</span>
  entities <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>q <span class="token operator">=&gt;</span> q<span class="token punctuation">.</span><span class="token function">using</span><span class="token punctuation">(</span>Foo<span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token decorator"><span class="token at operator">@</span><span class="token function">system</span></span>
<span class="token keyword">class</span> <span class="token class-name"><span class="token constant">B</span></span> <span class="token keyword">extends</span> <span class="token class-name">System</span> <span class="token punctuation">{</span>
  entities <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>q <span class="token operator">=&gt;</span> q<span class="token punctuation">.</span><span class="token function">using</span><span class="token punctuation">(</span>Foo<span class="token punctuation">)</span><span class="token punctuation">.</span>write<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token decorator"><span class="token at operator">@</span><span class="token function">system</span></span>
<span class="token keyword">class</span> <span class="token class-name"><span class="token constant">C</span></span> <span class="token keyword">extends</span> <span class="token class-name">System</span> <span class="token punctuation">{</span>
  entities <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>q <span class="token operator">=&gt;</span> q<span class="token punctuation">.</span><span class="token function">using</span><span class="token punctuation">(</span>Bar<span class="token punctuation">)</span><span class="token punctuation">.</span>write<span class="token punctuation">.</span><span class="token function">using</span><span class="token punctuation">(</span>Foo<span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token decorator"><span class="token at operator">@</span><span class="token function">system</span></span><span class="token punctuation">(</span>s <span class="token operator">=&gt;</span> s<span class="token punctuation">.</span><span class="token function">afterReadersOf</span><span class="token punctuation">(</span>Foo<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">class</span> <span class="token class-name"><span class="token constant">D</span></span> <span class="token keyword">extends</span> <span class="token class-name">System</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>

<span class="token decorator"><span class="token at operator">@</span><span class="token function">system</span></span><span class="token punctuation">(</span>s <span class="token operator">=&gt;</span> s<span class="token punctuation">.</span><span class="token function">inAnyOrderWith</span><span class="token punctuation">(</span><span class="token constant">B</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">class</span> <span class="token class-name"><span class="token constant">E</span></span> <span class="token keyword">extends</span> <span class="token class-name">System</span> <span class="token punctuation">{</span>
  entities <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>q <span class="token operator">=&gt;</span> q<span class="token punctuation">.</span><span class="token function">using</span><span class="token punctuation">(</span>Foo<span class="token punctuation">)</span><span class="token punctuation">.</span>write<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><div class="language-js"><pre><code><span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token keyword">extends</span> <span class="token class-name">System</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">schedule</span><span class="token punctuation">(</span><span class="token parameter">s</span> <span class="token operator">=&gt;</span> s<span class="token punctuation">.</span><span class="token function">after</span><span class="token punctuation">(</span><span class="token constant">C</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>entities <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token parameter">q</span> <span class="token operator">=&gt;</span> q<span class="token punctuation">.</span><span class="token function">using</span><span class="token punctuation">(</span>Foo<span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">B</span> <span class="token keyword">extends</span> <span class="token class-name">System</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>entities <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token parameter">q</span> <span class="token operator">=&gt;</span> q<span class="token punctuation">.</span><span class="token function">using</span><span class="token punctuation">(</span>Foo<span class="token punctuation">)</span><span class="token punctuation">.</span>write<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">C</span> <span class="token keyword">extends</span> <span class="token class-name">System</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>entities <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token parameter">q</span> <span class="token operator">=&gt;</span> q<span class="token punctuation">.</span><span class="token function">using</span><span class="token punctuation">(</span>Bar<span class="token punctuation">)</span><span class="token punctuation">.</span>write<span class="token punctuation">.</span><span class="token function">using</span><span class="token punctuation">(</span>Foo<span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">D</span> <span class="token keyword">extends</span> <span class="token class-name">System</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">schedule</span><span class="token punctuation">(</span><span class="token parameter">s</span> <span class="token operator">=&gt;</span> s<span class="token punctuation">.</span><span class="token function">beforeReadersOf</span><span class="token punctuation">(</span>Foo<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">E</span> <span class="token keyword">extends</span> <span class="token class-name">System</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">schedule</span><span class="token punctuation">(</span><span class="token parameter">s</span> <span class="token operator">=&gt;</span> s<span class="token punctuation">.</span><span class="token function">inAnyOrderWith</span><span class="token punctuation">(</span><span class="token constant">B</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>entities <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token parameter">q</span> <span class="token operator">=&gt;</span> q<span class="token punctuation">.</span><span class="token function">using</span><span class="token punctuation">(</span>Foo<span class="token punctuation">)</span><span class="token punctuation">.</span>write<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>These will form a precedence graph like this one:</p><div class="language-"><pre><code>B -\\   /--&gt; D
    |-|
E -/   \\--&gt; C ----&gt; A
</code></pre></div><p>If the constraints lead to a cycle in the system precedence graph \u2014 for example, because <code>SystemA</code> wants to run before <code>SystemB</code> which itself wants to run before <code>SystemA</code> \u2014 then creating the world will fail with an informative error and you&#39;ll need to fix the constraints so as to remove the cycle.</p><div class="info custom-block"><p class="custom-block-title">INFO</p><p>Note that every write entitlement implies a read entitlement for that system, so if you have multiple systems with a write entitlement for a component this will form a precedence cycle that you&#39;ll need to resolve with a more specific constraint.</p></div><p>The execution order applies to all lifecycle methods.</p><h2 id="grouping-systems" tabindex="-1">Grouping systems <a class="header-anchor" href="#grouping-systems" aria-hidden="true">#</a></h2><p>Sometimes you want to deal with systems in bulk, such as when deciding which <a href="./world.html#partial-execution">systems get executed</a> or setting execution order constraints. To make this easier you can create system groups:</p><div class="language-ts"><pre><code><span class="token keyword">const</span> myGroup <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span>SystemA<span class="token punctuation">,</span> SystemB<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// --- or ---</span>
<span class="token keyword">const</span> myGroup <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token decorator"><span class="token at operator">@</span><span class="token function">system</span></span><span class="token punctuation">(</span>myGroup<span class="token punctuation">)</span> <span class="token keyword">class</span> <span class="token class-name">SystemA</span> <span class="token keyword">extends</span> <span class="token class-name">System</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token decorator"><span class="token at operator">@</span><span class="token function">system</span></span><span class="token punctuation">(</span>myGroup<span class="token punctuation">)</span> <span class="token keyword">class</span> <span class="token class-name">SystemB</span> <span class="token keyword">extends</span> <span class="token class-name">System</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre></div><div class="language-js"><pre><code><span class="token keyword">const</span> myGroup <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span>SystemA<span class="token punctuation">,</span> SystemB<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>You can substitute groups in most places where a system type is expected and the operation will apply to all systems in the group. The system group object also has its own <code>schedule</code> method that you can use to set constraints on all systems in the group.</p><div class="language-ts"><pre><code><span class="token decorator"><span class="token at operator">@</span><span class="token function">system</span></span><span class="token punctuation">(</span>s <span class="token operator">=&gt;</span> s<span class="token punctuation">.</span><span class="token function">before</span><span class="token punctuation">(</span>physicsGroup<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">class</span> <span class="token class-name">InputManager</span> <span class="token keyword">extends</span> <span class="token class-name">System</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
physicsGroup<span class="token punctuation">.</span><span class="token function">schedule</span><span class="token punctuation">(</span>s <span class="token operator">=&gt;</span> s<span class="token punctuation">.</span><span class="token function">before</span><span class="token punctuation">(</span>renderGroup<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><div class="language-js"><pre><code><span class="token keyword">class</span> <span class="token class-name">InputManager</span> <span class="token keyword">extends</span> <span class="token class-name">System</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">schedule</span><span class="token punctuation">(</span><span class="token parameter">s</span> <span class="token operator">=&gt;</span> s<span class="token punctuation">.</span><span class="token function">before</span><span class="token punctuation">(</span>physicsGroup<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
physicsGroup<span class="token punctuation">.</span><span class="token function">schedule</span><span class="token punctuation">(</span><span class="token parameter">s</span> <span class="token operator">=&gt;</span> s<span class="token punctuation">.</span><span class="token function">before</span><span class="token punctuation">(</span>renderGroup<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><div class="only-ts"><p>(You can specify both a group and a schedule in the <code>@system</code> decorator; the group comes first.)</p></div><h2 id="attaching-systems" tabindex="-1">Attaching systems <a class="header-anchor" href="#attaching-systems" aria-hidden="true">#</a></h2><p>In the ECS paradigm system typically communicate with each other indirectly, by creating and destroying entities and components, which will update other systems&#39; queries. Sometimes, though, systems need to collaborate more closely, perhaps to share non-ECS data or to ensure that they&#39;re processing exactly the same query results. For cases like these you can &quot;attach&quot; one system to another.</p><div class="language-ts"><div class="highlight-lines"><br><br><br><br><br><div class="highlighted">\xA0</div><br><br><br><br><br></div><pre><code><span class="token decorator"><span class="token at operator">@</span><span class="token function">system</span></span> <span class="token keyword">class</span> <span class="token class-name">SystemA</span> <span class="token keyword">extends</span> <span class="token class-name">System</span> <span class="token punctuation">{</span>
  internalMap<span class="token operator">:</span> Map<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">,</span> Entity<span class="token operator">&gt;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token decorator"><span class="token at operator">@</span><span class="token function">system</span></span> <span class="token keyword">class</span> <span class="token class-name">SystemB</span> <span class="token keyword">extends</span> <span class="token class-name">System</span> <span class="token punctuation">{</span>
  <span class="token keyword">private</span> systemA <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">attach</span><span class="token punctuation">(</span>SystemA<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>systemA<span class="token punctuation">.</span>internalMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;foo&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><div class="language-js"><div class="highlight-lines"><br><br><br><br><br><br><br><br><div class="highlighted">\xA0</div><br><br><br><br><br><br><br></div><pre><code><span class="token keyword">class</span> <span class="token class-name">SystemA</span> <span class="token keyword">extends</span> <span class="token class-name">System</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>internalMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">SystemB</span> <span class="token keyword">extends</span> <span class="token class-name">System</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>systemA <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">attach</span><span class="token punctuation">(</span>SystemA<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>systemA<span class="token punctuation">.</span>internalMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;foo&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>You must set the result of the <code>attach</code> method on a property of the system object, and it will become an instance of the designated system by the time your system starts its lifecycle. (It will have a different value in the constructor, though, so don&#39;t use it there!)</p><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>Properties holding attached systems must not be ES2022 private fields (the ones prefixed with <code>#</code>), but if you&#39;re using TypeScript it&#39;s fine if they&#39;re declared as <code>private</code>.</p></div><p>It&#39;s fine for two systems to attach to each other and otherwise create attachment cycles.</p><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>Attached systems will be forced into the same thread, limiting the potential for concurrency in your application. Use this feature wisely!</p></div><h2 id="singleton-components" tabindex="-1">Singleton components <a class="header-anchor" href="#singleton-components" aria-hidden="true">#</a></h2><p>While most component types are intended to be instantiated as components on multiple entities, some should have only one instance \u2014 for example, global settings or global state for a game. To support this you could create an entity to hold the sole component instance and query for it in all the systems that need to reference it, but Becsy provides a shortcut. In every system that needs to access the singleton just declare access to it like this:</p><div class="language-ts"><div class="highlight-lines"><br><br><br><br><br><div class="highlighted">\xA0</div><br><br><br><br><br></div><pre><code><span class="token decorator"><span class="token at operator">@</span><span class="token function">component</span></span> <span class="token keyword">class</span> <span class="token class-name">Global</span> <span class="token punctuation">{</span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">field</span></span><span class="token punctuation">.</span>uint8 <span class="token keyword">declare</span> state<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token decorator"><span class="token at operator">@</span><span class="token function">system</span></span> <span class="token keyword">class</span> <span class="token class-name">SystemA</span> <span class="token keyword">extends</span> <span class="token class-name">System</span> <span class="token punctuation">{</span>
  <span class="token keyword">private</span> global <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>singleton<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>Global<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>global<span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><div class="language-js"><div class="highlight-lines"><br><br><br><br><br><br><br><br><div class="highlighted">\xA0</div><br><br><br><br><br><br><br></div><pre><code><span class="token keyword">class</span> <span class="token class-name">Global</span> <span class="token punctuation">{</span>
  <span class="token keyword">static</span> schema <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">state</span><span class="token operator">:</span> Type<span class="token punctuation">.</span>uint8
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">SystemA</span> <span class="token keyword">extends</span> <span class="token class-name">System</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>global <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>singleton<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>Global<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>global<span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>Properties holding singletons must not be ES2022 private fields (the ones prefixed with <code>#</code>), but if you&#39;re using TypeScript it&#39;s fine if they&#39;re declared as <code>private</code>.</p></div><p>You can declare a singleton with either <code>read</code> or <code>write</code> access and Becsy will automatically create an entity to hold it, add the component, set its storage strategy to <code>compact</code> with a capacity of 1, and return a handle that you can use throughout the system&#39;s lifecycle. Naturally, once you declare a component type as a singleton you can no longer add it to your own entities.</p><p>One thing to watch out for is that any singletons declared with <code>write</code> access will track a change event every time the system executes, whether the system made any changes to the component&#39;s value or not. If you have a <code>changed</code> query tracking a singleton component and the system doesn&#39;t actually update it every frame, you should instead move the <code>this.singleton.write</code> call into your <code>execute</code> method. This will give you a writable handle and track changes only when you need it, though you&#39;ll need to explicitly claim a write entitlement to the component type and you&#39;ll still need to declare the singleton in the usual way in another system (with <code>this.singleton.read</code> in the constructor) to get it set up correctly.</p><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>Keep in mind that any systems with write access to a singleton will not be able to run concurrently, just like with any other component type.</p></div><h2 id="coroutines" tabindex="-1">Coroutines <a class="header-anchor" href="#coroutines" aria-hidden="true">#</a></h2><p>Sometimes the work a system needs to do in response to an event takes more than one frame \u2014 for example, an animation followed by adding one to a counter, or a delay before some effect is deactivated. You can always keep track of the work&#39;s state in a component and perhaps use a separate dedicated system to handle progress, but this can split notionally sequential behaviors among many pieces of code and make them harder to understand. In those cases you can consider using coroutines instead.</p><p>A coroutine is a flow of execution that&#39;s attached to a system but has its own call stack and context. It can suspend its own execution to wait for some event to occur (e.g., wait for the next frame) then resume execution with the context intact. Coroutines are also easy to cancel \u2014 including entire stacks of them! \u2014 so they work well for complex behaviors that may not run to conclusion.</p><p>Here&#39;s a simple example:</p><div class="language-ts"><pre><code><span class="token decorator"><span class="token at operator">@</span><span class="token function">system</span></span> <span class="token keyword">class</span> <span class="token class-name">IntroSlideshow</span> <span class="token keyword">extends</span> <span class="token class-name">System</span> <span class="token punctuation">{</span>
  <span class="token keyword">private</span> slide <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>singleton<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>Slide<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">initialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">runSlideshow</span><span class="token punctuation">(</span><span class="token number">1.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// start a coroutine</span>
  <span class="token punctuation">}</span>

  <span class="token decorator"><span class="token at operator">@</span><span class="token function">co</span></span> <span class="token operator">*</span><span class="token function">runSlideshow</span><span class="token punctuation">(</span>delay<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>slide<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">yield</span> co<span class="token punctuation">.</span><span class="token function">waitForSeconds</span><span class="token punctuation">(</span>delay<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// suspend execution for delay seconds</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>slide<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token keyword">yield</span> co<span class="token punctuation">.</span><span class="token function">waitForFrames</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">// subliminal slide! suspend for 2 frames</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>slide<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
    <span class="token keyword">yield</span> co<span class="token punctuation">.</span><span class="token function">waitForSeconds</span><span class="token punctuation">(</span>delay<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// suspend execution for delay seconds</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>slide<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token comment">// all done</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><div class="language-js"><pre><code><span class="token keyword">class</span> <span class="token class-name">IntroSlideshow</span> <span class="token keyword">extends</span> <span class="token class-name">System</span> <span class="token punctuation">{</span>
  <span class="token keyword">private</span> slide <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>singleton<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>Slide<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">initialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>runSlideshow<span class="token punctuation">,</span> <span class="token number">1.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// start a coroutine</span>
  <span class="token punctuation">}</span>

  <span class="token operator">*</span><span class="token function">runSlideshow</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">delay</span><span class="token operator">:</span> number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>slide<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">yield</span> co<span class="token punctuation">.</span><span class="token function">waitForSeconds</span><span class="token punctuation">(</span>delay<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// suspend execution for delay seconds</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>slide<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token keyword">yield</span> co<span class="token punctuation">.</span><span class="token function">waitForFrames</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">// subliminal slide! suspend for 2 frames</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>slide<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
    <span class="token keyword">yield</span> co<span class="token punctuation">.</span><span class="token function">waitForSeconds</span><span class="token punctuation">(</span>delay<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// suspend execution for delay seconds</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>slide<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token comment">// all done</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><div class="only-ts"><p>Coroutines are declared as generator methods with the <code>@co</code> decorator. You can invoke them directly from the system&#39;s lifecycle methods, or from other coroutines (in which case prefix the call with <code>yield</code> to wait for the coroutine to complete).</p></div><div class="only-js"><p>Coroutines are declare as generator methods. You use the <code>start</code> method to start one from a lifecycle method, or call them directly from other coroutines prefixed with <code>yield</code>.</p></div><p>A system&#39;s running coroutines are executed each frame immediately after the call to <code>execute</code>, in the reverse order in which they were started.</p><p>The return value when starting a coroutine is a handle that has the cancellation API; you can also access it from inside a coroutine via <code>co</code>. The handle is stable so you can hang on to it until the coroutine exits or is cancelled.</p><div class="language-ts"><div class="highlight-lines"><br><br><br><br><br><div class="highlighted">\xA0</div><div class="highlighted">\xA0</div><br><br><br><br><div class="highlighted">\xA0</div><br><br><br></div><pre><code><span class="token decorator"><span class="token at operator">@</span><span class="token function">system</span></span> <span class="token keyword">class</span> <span class="token class-name">IdleStart</span> <span class="token keyword">extends</span> <span class="token class-name">System</span> <span class="token punctuation">{</span>
  <span class="token comment">// Query for activity components that will signal us to end the initial idle behavior.</span>
  <span class="token keyword">private</span> activity <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>q <span class="token operator">=&gt;</span> q<span class="token punctuation">.</span>current<span class="token punctuation">.</span><span class="token function">with</span><span class="token punctuation">(</span>Activity<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">initialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>
    <span class="token comment">// Start the idle behavior coroutine, and cancel once Activity entities appear.</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">doIdle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">cancelIf</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>activity<span class="token punctuation">.</span>current<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token decorator"><span class="token at operator">@</span><span class="token function">co</span></span> <span class="token operator">*</span><span class="token function">doIdle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// ... do stuff ...</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>someSpecialCondition<span class="token punctuation">)</span> co<span class="token punctuation">.</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><div class="language-js"><div class="highlight-lines"><br><br><br><br><br><br><br><div class="highlighted">\xA0</div><div class="highlighted">\xA0</div><br><br><br><br><div class="highlighted">\xA0</div><br><br><br></div><pre><code><span class="token keyword">class</span> <span class="token class-name">IdleStart</span> <span class="token keyword">extends</span> <span class="token class-name">System</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// Query for activity components that will signal us to end the initial idle behavior.</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>activity <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token parameter">q</span> <span class="token operator">=&gt;</span> q<span class="token punctuation">.</span>current<span class="token punctuation">.</span><span class="token function">with</span><span class="token punctuation">(</span>Activity<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token function">initialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>
    <span class="token comment">// Start the idle behavior coroutine, and cancel once Activity entities appear.</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>doIdle<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">cancelIf</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>activity<span class="token punctuation">.</span>current<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token operator">*</span><span class="token function">doIdle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// ... do stuff ...</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>someSpecialCondition<span class="token punctuation">)</span> co<span class="token punctuation">.</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// cancel immediately</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>Pending cancellation conditions are evaluated every frame, before coroutines are resumed.</p><p>Finally, it&#39;s often the case that a system will need to kick off a coroutine for each entity in a query, so there&#39;s some special support for this use case. You can set a coroutine&#39;s <code>scope</code>, so the coroutine will automatically be canceled if the entity is deleted, and gain access to more advanced cancellation conditions.</p><div class="language-ts"><div class="highlight-lines"><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><div class="highlighted">\xA0</div><div class="highlighted">\xA0</div><div class="highlighted">\xA0</div><br><br><br><br><br><br><br><br><br><br><br></div><pre><code><span class="token decorator"><span class="token at operator">@</span><span class="token function">component</span></span> <span class="token keyword">class</span> <span class="token class-name">Zombie</span> <span class="token punctuation">{</span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">field</span></span><span class="token punctuation">.</span><span class="token builtin">boolean</span> <span class="token keyword">declare</span> dancing<span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token decorator"><span class="token at operator">@</span><span class="token function">system</span></span> <span class="token keyword">class</span> <span class="token class-name">DanceOrWalk</span> <span class="token keyword">extends</span> <span class="token class-name">System</span> <span class="token punctuation">{</span>
  <span class="token keyword">private</span> zombies <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>q <span class="token operator">=&gt;</span> q<span class="token punctuation">.</span>current<span class="token punctuation">.</span><span class="token function">with</span><span class="token punctuation">(</span>Zombie<span class="token punctuation">)</span><span class="token punctuation">.</span>write<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> zombie <span class="token keyword">of</span> <span class="token keyword">this</span><span class="token punctuation">.</span>zombies<span class="token punctuation">.</span>current<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> beDancing <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0.5</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>beDancing <span class="token operator">===</span> zombie<span class="token punctuation">.</span>dancing<span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>
      zombie<span class="token punctuation">.</span>dancing <span class="token operator">=</span> beDancing<span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>beDancing<span class="token punctuation">)</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">dance</span><span class="token punctuation">(</span>zombie<span class="token punctuation">.</span><span class="token function">hold</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">walk</span><span class="token punctuation">(</span>zombie<span class="token punctuation">.</span><span class="token function">hold</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token decorator"><span class="token at operator">@</span><span class="token function">co</span></span> <span class="token operator">*</span><span class="token function">dance</span><span class="token punctuation">(</span>zombie<span class="token operator">:</span> Entity<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    co<span class="token punctuation">.</span><span class="token function">scope</span><span class="token punctuation">(</span>zombie<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// scope ourselves to our very own zombie</span>
    co<span class="token punctuation">.</span><span class="token function">cancelIfComponentMissing</span><span class="token punctuation">(</span>Zombie<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// cancel if our zombie gets better</span>
    co<span class="token punctuation">.</span><span class="token function">cancelIfCoroutineStarted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// cancel if our zombie starts another coroutine in this system</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// ... dance zombie, dance!</span>
      <span class="token keyword">yield</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token decorator"><span class="token at operator">@</span><span class="token function">co</span></span> <span class="token operator">*</span><span class="token function">walk</span><span class="token punctuation">(</span>zombie<span class="token operator">:</span> Entity<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// ... as above</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><div class="language-js"><div class="highlight-lines"><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><div class="highlighted">\xA0</div><div class="highlighted">\xA0</div><div class="highlighted">\xA0</div><br><br><br><br><br><br><br><br><br><br><br></div><pre><code><span class="token keyword">class</span> <span class="token class-name">Zombie</span> <span class="token punctuation">{</span>
  <span class="token keyword">static</span> schema <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">dancing</span><span class="token operator">:</span> Type<span class="token punctuation">.</span>boolean
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">DanceOrWalk</span> <span class="token keyword">extends</span> <span class="token class-name">System</span> <span class="token punctuation">{</span>
  <span class="token keyword">private</span> zombies <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token parameter">q</span> <span class="token operator">=&gt;</span> q<span class="token punctuation">.</span>current<span class="token punctuation">.</span><span class="token function">with</span><span class="token punctuation">(</span>Zombie<span class="token punctuation">)</span><span class="token punctuation">.</span>write<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> zombie <span class="token keyword">of</span> <span class="token keyword">this</span><span class="token punctuation">.</span>zombies<span class="token punctuation">.</span>current<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> beDancing <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0.5</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>beDancing <span class="token operator">===</span> zombie<span class="token punctuation">.</span>dancing<span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>
      zombie<span class="token punctuation">.</span>dancing <span class="token operator">=</span> beDancing<span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>beDancing<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>dance<span class="token punctuation">,</span> zombie<span class="token punctuation">.</span><span class="token function">hold</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>walk<span class="token punctuation">,</span> zombie<span class="token punctuation">.</span><span class="token function">hold</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token operator">*</span><span class="token function">dance</span><span class="token punctuation">(</span><span class="token parameter">zombie</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    co<span class="token punctuation">.</span><span class="token function">scope</span><span class="token punctuation">(</span>zombie<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// scope ourselves to our very own zombie</span>
    co<span class="token punctuation">.</span><span class="token function">cancelIfComponentMissing</span><span class="token punctuation">(</span>Zombie<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// cancel if our zombie gets better</span>
    co<span class="token punctuation">.</span><span class="token function">cancelIfCoroutineStarted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// cancel if our zombie starts another coroutine in this system</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// ... dance zombie, dance!</span>
      <span class="token keyword">yield</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token operator">*</span><span class="token function">walk</span><span class="token punctuation">(</span><span class="token parameter">zombie</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// ... as above</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div>`,85);function i(u,r,k,d,y,h){const n=o("language-switcher");return p(),a("div",null,[t(n),l])}var w=s(c,[["render",i]]);export{f as __pageData,w as default};
