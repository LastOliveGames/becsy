import{_ as s,c as a,a as t,b as p,o,r as e}from"./app.d08bd159.js";const w=`{"title":"Getting started","description":"","frontmatter":{},"headers":[{"level":2,"title":"ECS principles","slug":"ecs-principles"},{"level":2,"title":"Adding Becsy to your project","slug":"adding-becsy-to-your-project"},{"level":2,"title":"Creating a world","slug":"creating-a-world"},{"level":2,"title":"Defining components","slug":"defining-components"},{"level":2,"title":"Creating entities","slug":"creating-entities"},{"level":2,"title":"Creating a system","slug":"creating-a-system"},{"level":2,"title":"Running the systems","slug":"running-the-systems"},{"level":2,"title":"Putting everything together","slug":"putting-everything-together"},{"level":2,"title":"What's next?","slug":"what-s-next"}],"relativePath":"guide/getting-started.md","lastUpdated":1666476678000}`,c={},l=p(`<h1 id="getting-started" tabindex="-1">Getting started <a class="header-anchor" href="#getting-started" aria-hidden="true">#</a></h1><h2 id="ecs-principles" tabindex="-1">ECS principles <a class="header-anchor" href="#ecs-principles" aria-hidden="true">#</a></h2><p>Becsy is an Entity Component System (ECS) framework for web applications. The basic idea of this pattern is to move from defining application entities using a class hierarchy to using composition in a Data Oriented Programming paradigm. (<a href="https://en.wikipedia.org/wiki/Entity_component_system" target="_blank" rel="noopener noreferrer">More info on wikipedia</a>). Structuring your application as an ECS can result in code that is more efficient and easier to extend over time.</p><p>Here&#39;s a short glossary of common ECS terms:</p><ul><li><a href="./architecture/entities.html">entities</a>: an object with a unique ID that can have multiple components attached to it.</li><li><a href="./architecture/components.html">components</a>: different facets of an entity, e.g. geometry, physics, hit points. Data is only stored in components.</li><li><a href="./architecture/systems.html">systems</a>: pieces of code that do the actual work within an application by processing entities and modifying their components.</li><li><a href="./architecture/queries.html">queries</a>: used by systems to determine which entities they are interested in, based on the components attached to the entities.</li><li><a href="./architecture/world.html">world</a>: a container for entities, components, systems and queries.</li></ul><p>The usual workflow when building an ECS based program:</p><ol><li>Create the <em>component</em> types that shape the data you need to use in your application.</li><li>Create <em>entities</em> and attach <em>components</em> to them.</li><li>Create the <em>systems</em> that will use these <em>components</em> to read and transform the data of <em>entities</em> selected by a <em>query</em>.</li><li>Execute all the <em>systems</em> each frame.</li></ol><h2 id="adding-becsy-to-your-project" tabindex="-1">Adding Becsy to your project <a class="header-anchor" href="#adding-becsy-to-your-project" aria-hidden="true">#</a></h2><p>Becsy is published on <code>npm</code> under <code>@lastolivegames/becsy</code>.</p><div class="language-bash"><pre><code><span class="token function">npm</span> <span class="token function">install</span> @lastolivegames/becsy
</code></pre></div><h2 id="creating-a-world" tabindex="-1">Creating a world <a class="header-anchor" href="#creating-a-world" aria-hidden="true">#</a></h2><p>A world is a container for entities, components and systems. Becsy supports just one world per process.</p><p>Let&#39;s start by creating our first world:</p><div class="language-ts"><pre><code><span class="token keyword">const</span> world <span class="token operator">=</span> <span class="token keyword">await</span> World<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><div class="language-js"><pre><code><span class="token keyword">const</span> world <span class="token operator">=</span> <span class="token keyword">await</span> World<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h2 id="defining-components" tabindex="-1">Defining components <a class="header-anchor" href="#defining-components" aria-hidden="true">#</a></h2><p>Components are just objects that hold data. We define them as behaviorless classes with some extra metadata about their properties.</p><div class="language-js"><pre><code><span class="token keyword">class</span> <span class="token class-name">Acceleration</span> <span class="token punctuation">{</span>
  <span class="token keyword">static</span> schema <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token literal-property property">type</span><span class="token operator">:</span> Type<span class="token punctuation">.</span>float64<span class="token punctuation">,</span> <span class="token keyword">default</span><span class="token operator">:</span> <span class="token number">0.1</span><span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">Position</span> <span class="token punctuation">{</span>
  <span class="token keyword">static</span> schema <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token literal-property property">type</span><span class="token operator">:</span> Type<span class="token punctuation">.</span>float64<span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token literal-property property">type</span><span class="token operator">:</span> Type<span class="token punctuation">.</span>float64<span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token literal-property property">z</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token literal-property property">type</span><span class="token operator">:</span> Type<span class="token punctuation">.</span>float64<span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><div class="language-ts"><pre><code><span class="token decorator"><span class="token at operator">@</span><span class="token function">component</span></span> <span class="token keyword">class</span> <span class="token class-name">Acceleration</span> <span class="token punctuation">{</span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">field</span></span><span class="token punctuation">(</span><span class="token punctuation">{</span>type<span class="token operator">:</span> Type<span class="token punctuation">.</span>float64<span class="token punctuation">,</span> <span class="token keyword">default</span><span class="token operator">:</span> <span class="token number">0.1</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token keyword">declare</span> value<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token decorator"><span class="token at operator">@</span><span class="token function">component</span></span> <span class="token keyword">class</span> <span class="token class-name">Position</span> <span class="token punctuation">{</span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">field</span></span><span class="token punctuation">.</span>float64 <span class="token keyword">declare</span> x<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">field</span></span><span class="token punctuation">.</span>float64 <span class="token keyword">declare</span> y<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">field</span></span><span class="token punctuation">.</span>float64 <span class="token keyword">declare</span> z<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><div class="only-ts"><p>The <code>@component</code> decorator will automatically register these component types with our world.</p></div><div class="only-js"><p>We also need to let the world know about our component types when creating it:</p><div class="language-js"><pre><code><span class="token keyword">const</span> world <span class="token operator">=</span> <span class="token keyword">await</span> World<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">defs</span><span class="token operator">:</span> <span class="token punctuation">[</span>Acceleration<span class="token punctuation">,</span> Position<span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div></div><p><a href="./architecture/components.html">More information on how to define components types</a>.</p><h2 id="creating-entities" tabindex="-1">Creating entities <a class="header-anchor" href="#creating-entities" aria-hidden="true">#</a></h2><p>Having our world created and some component types already defined, let&#39;s create <a href="./architecture/entities.html">entities</a> and attach new instances of these component types to them:</p><div class="language-js"><pre><code>world<span class="token punctuation">.</span><span class="token function">createEntity</span><span class="token punctuation">(</span>Position<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  world<span class="token punctuation">.</span><span class="token function">createEntity</span><span class="token punctuation">(</span>
    Acceleration<span class="token punctuation">,</span>
    Position<span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token literal-property property">x</span><span class="token operator">:</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token literal-property property">z</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">}</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><div class="language-ts"><pre><code>world<span class="token punctuation">.</span><span class="token function">createEntity</span><span class="token punctuation">(</span>Position<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  world<span class="token punctuation">.</span><span class="token function">createEntity</span><span class="token punctuation">(</span>
    Acceleration<span class="token punctuation">,</span>
    Position<span class="token punctuation">,</span> <span class="token punctuation">{</span>x<span class="token operator">:</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">,</span> y<span class="token operator">:</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">,</span> z<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">}</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>With that, we have just created 11 entities: ten with the <code>Acceleration</code> and <code>Position</code> components, and one with just the <code>Position</code> component. Notice that the <code>Position</code> component is added using custom parameters. If we didn&#39;t use the parameters then the component would use the default values declared in the <code>Position</code> class or the fallback defaults (0, <code>null</code>, <code>false</code>, etc.).</p><p><a href="./architecture/entities.html">More information on creating and handling entities</a>.</p><h2 id="creating-a-system" tabindex="-1">Creating a system <a class="header-anchor" href="#creating-a-system" aria-hidden="true">#</a></h2><p>Now we are going to define <a href="./architecture/systems.html">systems</a> to process the components we just created. A system should extend the <code>System</code> class and can override a number of hook methods, though we&#39;ll only need <code>execute</code> to get started, which gets called on every frame. We&#39;ll also need to declare <a href="./architecture/queries.html">queries</a> for entities we are interested in based on the components they own.</p><p>We will start by creating a system that will loop through all the entities that have a <code>Position</code> component (11 in our example) and log their positions.</p><div class="language-js"><pre><code><span class="token keyword">class</span> <span class="token class-name">PositionLogSystem</span> <span class="token keyword">extends</span> <span class="token class-name">System</span> <span class="token punctuation">{</span>
  <span class="token comment">// Define a query of entities that have the &quot;Position&quot; component.</span>
  entities <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token parameter">q</span> <span class="token operator">=&gt;</span> q<span class="token punctuation">.</span>current<span class="token punctuation">.</span><span class="token function">with</span><span class="token punctuation">(</span>Position<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// This method will get called on every frame.</span>
  <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// Iterate through all the entities on the query.</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> entity <span class="token keyword">of</span> <span class="token keyword">this</span><span class="token punctuation">.</span>entities<span class="token punctuation">.</span>current<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// Access the component \`Position\` on the current entity.</span>
      <span class="token keyword">const</span> pos <span class="token operator">=</span> entity<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>Position<span class="token punctuation">)</span><span class="token punctuation">;</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>
        <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Entity with ordinal </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>entity<span class="token punctuation">.</span>ordinal<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> has component </span><span class="token template-punctuation string">\`</span></span> <span class="token operator">+</span>
        <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Position={x: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>pos<span class="token punctuation">.</span>x<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">, y: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>pos<span class="token punctuation">.</span>y<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">, z: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>pos<span class="token punctuation">.</span>z<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">}</span><span class="token template-punctuation string">\`</span></span>
      <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><div class="language-ts"><pre><code><span class="token decorator"><span class="token at operator">@</span><span class="token function">system</span></span> <span class="token keyword">class</span> <span class="token class-name">PositionLogSystem</span> <span class="token keyword">extends</span> <span class="token class-name">System</span> <span class="token punctuation">{</span>
  <span class="token comment">// Define a query of entities that have the &quot;Position&quot; component.</span>
  entities <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>q <span class="token operator">=&gt;</span> q<span class="token punctuation">.</span>current<span class="token punctuation">.</span><span class="token function">with</span><span class="token punctuation">(</span>Position<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// This method will get called on every frame.</span>
  <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// Iterate through all the entities on the query.</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> entity <span class="token keyword">of</span> <span class="token keyword">this</span><span class="token punctuation">.</span>entities<span class="token punctuation">.</span>current<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// Access the component \`Position\` on the current entity.</span>
      <span class="token keyword">const</span> pos <span class="token operator">=</span> entity<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>Position<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>
        <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Entity with ordinal </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>entity<span class="token punctuation">.</span>ordinal<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> has component </span><span class="token template-punctuation string">\`</span></span> <span class="token operator">+</span>
        <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Position={x: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>pos<span class="token punctuation">.</span>x<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">, y: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>pos<span class="token punctuation">.</span>y<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">, z: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>pos<span class="token punctuation">.</span>z<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">}</span><span class="token template-punctuation string">\`</span></span>
      <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>The next system moves each entity that has both a Position and an Acceleration.</p><div class="language-js"><pre><code><span class="token keyword">class</span> <span class="token class-name">MovableSystem</span> <span class="token keyword">extends</span> <span class="token class-name">System</span> <span class="token punctuation">{</span>
  <span class="token comment">// Define a query of entities that have &quot;Acceleration&quot; and &quot;Position&quot; components,</span>
  <span class="token comment">// specifying that while we only need to read &quot;Acceleration&quot;, we&#39;ll need to both</span>
  <span class="token comment">// read and write &quot;Position&quot;.</span>
  entities <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>
    <span class="token parameter">q</span> <span class="token operator">=&gt;</span> q<span class="token punctuation">.</span>current<span class="token punctuation">.</span><span class="token function">with</span><span class="token punctuation">(</span>Acceleration<span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">.</span>and<span class="token punctuation">.</span><span class="token function">with</span><span class="token punctuation">(</span>Position<span class="token punctuation">)</span><span class="token punctuation">.</span>write<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// This method will get called on every frame by default.</span>
  <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// Iterate through all the entities on the query.</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> entity <span class="token keyword">of</span> <span class="token keyword">this</span><span class="token punctuation">.</span>entities<span class="token punctuation">.</span>current<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// Get the \`Acceleration\` component as read-only and extract its value.</span>
      <span class="token keyword">const</span> acceleration <span class="token operator">=</span> entity<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>Acceleration<span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span>

      <span class="token comment">// Get the \`Position\` component as read-write.</span>
      <span class="token keyword">const</span> position <span class="token operator">=</span> entity<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>Position<span class="token punctuation">)</span><span class="token punctuation">;</span>
      position<span class="token punctuation">.</span>x <span class="token operator">+=</span> acceleration <span class="token operator">*</span> <span class="token keyword">this</span><span class="token punctuation">.</span>delta<span class="token punctuation">;</span>
      position<span class="token punctuation">.</span>y <span class="token operator">+=</span> acceleration <span class="token operator">*</span> <span class="token keyword">this</span><span class="token punctuation">.</span>delta<span class="token punctuation">;</span>
      position<span class="token punctuation">.</span>z <span class="token operator">+=</span> acceleration <span class="token operator">*</span> <span class="token keyword">this</span><span class="token punctuation">.</span>delta<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><div class="language-ts"><pre><code><span class="token decorator"><span class="token at operator">@</span><span class="token function">system</span></span> <span class="token keyword">class</span> <span class="token class-name">MovableSystem</span> <span class="token keyword">extends</span> <span class="token class-name">System</span> <span class="token punctuation">{</span>
  <span class="token comment">// Define a query of entities that have &quot;Acceleration&quot; and &quot;Position&quot; components,</span>
  <span class="token comment">// specifying that while we only need to read &quot;Acceleration&quot;, we&#39;ll need to both</span>
  <span class="token comment">// read and write &quot;Position&quot;.</span>
  entities <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>
    q <span class="token operator">=&gt;</span> q<span class="token punctuation">.</span>current<span class="token punctuation">.</span><span class="token function">with</span><span class="token punctuation">(</span>Acceleration<span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">.</span>and<span class="token punctuation">.</span><span class="token function">with</span><span class="token punctuation">(</span>Position<span class="token punctuation">)</span><span class="token punctuation">.</span>write<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// This method will get called on every frame by default.</span>
  <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// Iterate through all the entities on the query.</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> entity <span class="token keyword">of</span> <span class="token keyword">this</span><span class="token punctuation">.</span>entities<span class="token punctuation">.</span>current<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// Get the \`Acceleration\` component as read-only and extract its value.</span>
      <span class="token keyword">const</span> acceleration <span class="token operator">=</span> entity<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>Acceleration<span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span>

      <span class="token comment">// Get the \`Position\` component as read-write.</span>
      <span class="token keyword">const</span> position <span class="token operator">=</span> entity<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>Position<span class="token punctuation">)</span><span class="token punctuation">;</span>
      position<span class="token punctuation">.</span>x <span class="token operator">+=</span> acceleration <span class="token operator">*</span> <span class="token keyword">this</span><span class="token punctuation">.</span>delta<span class="token punctuation">;</span>
      position<span class="token punctuation">.</span>y <span class="token operator">+=</span> acceleration <span class="token operator">*</span> <span class="token keyword">this</span><span class="token punctuation">.</span>delta<span class="token punctuation">;</span>
      position<span class="token punctuation">.</span>z <span class="token operator">+=</span> acceleration <span class="token operator">*</span> <span class="token keyword">this</span><span class="token punctuation">.</span>delta<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>This system&#39;s query holds a list of entities that have both <code>Acceleration</code> and <code>Position</code>; 10 in total in our example.</p><p>Note that we are accessing components on an entity by calling:</p><ul><li><code>read(Component)</code>: if the component will be used as read-only.</li><li><code>write(Component)</code>: if we plan to modify the values on the component. And a query in the system must make the corresponding declarations for the components or the accesses will fail at runtime.</li></ul><p>We could create an arbitrary number of queries if needed and process them in <code>execute</code>, for example:</p><div class="language-js"><pre><code><span class="token keyword">class</span> <span class="token class-name">SystemDemo</span> <span class="token keyword">extends</span> <span class="token class-name">System</span> <span class="token punctuation">{</span>
  boxes <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token parameter">q</span> <span class="token operator">=&gt;</span> q<span class="token punctuation">.</span>current<span class="token punctuation">.</span><span class="token function">with</span><span class="token punctuation">(</span>Box<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  balls <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token parameter">q</span> <span class="token operator">=&gt;</span> q<span class="token punctuation">.</span>current<span class="token punctuation">.</span><span class="token function">with</span><span class="token punctuation">(</span>Ball<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> entity <span class="token keyword">of</span> <span class="token keyword">this</span><span class="token punctuation">.</span>boxes<span class="token punctuation">.</span>current<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">/* do things with box-like entity */</span> <span class="token punctuation">}</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> entity <span class="token keyword">of</span> <span class="token keyword">this</span><span class="token punctuation">.</span>balls<span class="token punctuation">.</span>current<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">/* do things with ball-like entity */</span> <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><div class="language-ts"><pre><code><span class="token decorator"><span class="token at operator">@</span><span class="token function">system</span></span> <span class="token keyword">class</span> <span class="token class-name">SystemDemo</span> <span class="token keyword">extends</span> <span class="token class-name">System</span> <span class="token punctuation">{</span>
  boxes <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>q <span class="token operator">=&gt;</span> q<span class="token punctuation">.</span>current<span class="token punctuation">.</span><span class="token function">with</span><span class="token punctuation">(</span>Box<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  balls <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>q <span class="token operator">=&gt;</span> q<span class="token punctuation">.</span>current<span class="token punctuation">.</span><span class="token function">with</span><span class="token punctuation">(</span>Ball<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> entity <span class="token keyword">of</span> <span class="token keyword">this</span><span class="token punctuation">.</span>boxes<span class="token punctuation">.</span>current<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">/* do things with box-like entity */</span> <span class="token punctuation">}</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> entity <span class="token keyword">of</span> <span class="token keyword">this</span><span class="token punctuation">.</span>balls<span class="token punctuation">.</span>current<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">/* do things with ball-like entity */</span> <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><div class="only-js"><p>Just like for component definitions, we&#39;ll need to let our world know about these systems:</p><div class="language-js"><pre><code><span class="token keyword">const</span> world <span class="token operator">=</span> <span class="token keyword">await</span> World<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">defs</span><span class="token operator">:</span> <span class="token punctuation">[</span>Acceleration<span class="token punctuation">,</span> Position<span class="token punctuation">,</span> PositionLogSystem<span class="token punctuation">,</span> MovableSystem<span class="token punctuation">]</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div></div><p>More information on <a href="./architecture/systems.html">systems</a> and <a href="./architecture/queries.html">queries</a>.</p><h2 id="running-the-systems" tabindex="-1">Running the systems <a class="header-anchor" href="#running-the-systems" aria-hidden="true">#</a></h2><p>Now you just need to invoke <code>world.execute()</code> per frame. Currently Becsy doesn&#39;t provide a default scheduler, so you must do it yourself:</p><div class="language-js"><pre><code><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// Run all the systems</span>
  <span class="token keyword">await</span> world<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">requestAnimationFrame</span><span class="token punctuation">(</span>run<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><div class="language-ts"><pre><code><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// Run all the systems</span>
  <span class="token keyword">await</span> world<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">requestAnimationFrame</span><span class="token punctuation">(</span>run<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h2 id="putting-everything-together" tabindex="-1">Putting everything together <a class="header-anchor" href="#putting-everything-together" aria-hidden="true">#</a></h2><div class="language-js"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span>System<span class="token punctuation">,</span> Type<span class="token punctuation">,</span> World<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@lastolivegames/becsy&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">Acceleration</span> <span class="token punctuation">{</span>
  <span class="token keyword">static</span> schema <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token literal-property property">type</span><span class="token operator">:</span> Type<span class="token punctuation">.</span>float64<span class="token punctuation">,</span> <span class="token keyword">default</span><span class="token operator">:</span> <span class="token number">0.1</span><span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">Position</span> <span class="token punctuation">{</span>
  <span class="token keyword">static</span> schema <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token literal-property property">type</span><span class="token operator">:</span> Type<span class="token punctuation">.</span>float64<span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token literal-property property">type</span><span class="token operator">:</span> Type<span class="token punctuation">.</span>float64<span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token literal-property property">z</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token literal-property property">type</span><span class="token operator">:</span> Type<span class="token punctuation">.</span>float64<span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">PositionLogSystem</span> <span class="token keyword">extends</span> <span class="token class-name">System</span> <span class="token punctuation">{</span>
  entities <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token parameter">q</span> <span class="token operator">=&gt;</span> q<span class="token punctuation">.</span>current<span class="token punctuation">.</span><span class="token function">with</span><span class="token punctuation">(</span>Position<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> entity <span class="token keyword">of</span> <span class="token keyword">this</span><span class="token punctuation">.</span>entities<span class="token punctuation">.</span>current<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> pos <span class="token operator">=</span> entity<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>Position<span class="token punctuation">)</span><span class="token punctuation">;</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>
        <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Entity with ordinal </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>entity<span class="token punctuation">.</span>ordinal<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> has component </span><span class="token template-punctuation string">\`</span></span> <span class="token operator">+</span>
        <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Position={x: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>pos<span class="token punctuation">.</span>x<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">, y: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>pos<span class="token punctuation">.</span>y<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">, z: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>pos<span class="token punctuation">.</span>z<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">}</span><span class="token template-punctuation string">\`</span></span>
      <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">MovableSystem</span> <span class="token keyword">extends</span> <span class="token class-name">System</span> <span class="token punctuation">{</span>
  entities <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>
    <span class="token parameter">q</span> <span class="token operator">=&gt;</span> q<span class="token punctuation">.</span>current<span class="token punctuation">.</span><span class="token function">with</span><span class="token punctuation">(</span>Acceleration<span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">.</span>and<span class="token punctuation">.</span><span class="token function">with</span><span class="token punctuation">(</span>Position<span class="token punctuation">)</span><span class="token punctuation">.</span>write<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> entity <span class="token keyword">of</span> <span class="token keyword">this</span><span class="token punctuation">.</span>entities<span class="token punctuation">.</span>current<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> acceleration <span class="token operator">=</span> entity<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>Acceleration<span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span>
      <span class="token keyword">const</span> position <span class="token operator">=</span> entity<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>Position<span class="token punctuation">)</span><span class="token punctuation">;</span>
      position<span class="token punctuation">.</span>x <span class="token operator">+=</span> acceleration <span class="token operator">*</span> <span class="token keyword">this</span><span class="token punctuation">.</span>delta<span class="token punctuation">;</span>
      position<span class="token punctuation">.</span>y <span class="token operator">+=</span> acceleration <span class="token operator">*</span> <span class="token keyword">this</span><span class="token punctuation">.</span>delta<span class="token punctuation">;</span>
      position<span class="token punctuation">.</span>z <span class="token operator">+=</span> acceleration <span class="token operator">*</span> <span class="token keyword">this</span><span class="token punctuation">.</span>delta<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> world <span class="token operator">=</span> <span class="token keyword">await</span> World<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">defs</span><span class="token operator">:</span> <span class="token punctuation">[</span>Acceleration<span class="token punctuation">,</span> Position<span class="token punctuation">,</span> PositionLogSystem<span class="token punctuation">,</span> MovableSystem<span class="token punctuation">]</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


world<span class="token punctuation">.</span><span class="token function">createEntity</span><span class="token punctuation">(</span>Position<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  world<span class="token punctuation">.</span><span class="token function">createEntity</span><span class="token punctuation">(</span>
    Acceleration<span class="token punctuation">,</span>
    Position<span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token literal-property property">x</span><span class="token operator">:</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token literal-property property">z</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">}</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">await</span> world<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">requestAnimationFrame</span><span class="token punctuation">(</span>run<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><div class="language-ts"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span>component<span class="token punctuation">,</span> field<span class="token punctuation">,</span> system<span class="token punctuation">,</span> System<span class="token punctuation">,</span> Type<span class="token punctuation">,</span> World<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@lastolivegames/becsy&#39;</span><span class="token punctuation">;</span>

<span class="token decorator"><span class="token at operator">@</span><span class="token function">component</span></span> <span class="token keyword">class</span> <span class="token class-name">Acceleration</span> <span class="token punctuation">{</span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">field</span></span><span class="token punctuation">(</span><span class="token punctuation">{</span>type<span class="token operator">:</span> Type<span class="token punctuation">.</span>float64<span class="token punctuation">,</span> <span class="token keyword">default</span><span class="token operator">:</span> <span class="token number">0.1</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token keyword">declare</span> value<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token decorator"><span class="token at operator">@</span><span class="token function">component</span></span> <span class="token keyword">class</span> <span class="token class-name">Position</span> <span class="token punctuation">{</span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">field</span></span><span class="token punctuation">.</span>float64 <span class="token keyword">declare</span> x<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">field</span></span><span class="token punctuation">.</span>float64 <span class="token keyword">declare</span> y<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">field</span></span><span class="token punctuation">.</span>float64 <span class="token keyword">declare</span> z<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token decorator"><span class="token at operator">@</span><span class="token function">system</span></span> <span class="token keyword">class</span> <span class="token class-name">PositionLogSystem</span> <span class="token keyword">extends</span> <span class="token class-name">System</span> <span class="token punctuation">{</span>
  entities <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>q <span class="token operator">=&gt;</span> q<span class="token punctuation">.</span>current<span class="token punctuation">.</span><span class="token function">with</span><span class="token punctuation">(</span>Position<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> entity <span class="token keyword">of</span> <span class="token keyword">this</span><span class="token punctuation">.</span>entities<span class="token punctuation">.</span>current<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> pos <span class="token operator">=</span> entity<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>Position<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>
        <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Entity with ordinal </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>entity<span class="token punctuation">.</span>ordinal<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> has component </span><span class="token template-punctuation string">\`</span></span> <span class="token operator">+</span>
        <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Position={x: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>pos<span class="token punctuation">.</span>x<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">, y: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>pos<span class="token punctuation">.</span>y<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">, z: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>pos<span class="token punctuation">.</span>z<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">}</span><span class="token template-punctuation string">\`</span></span>
      <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token decorator"><span class="token at operator">@</span><span class="token function">system</span></span> <span class="token keyword">class</span> <span class="token class-name">MovableSystem</span> <span class="token keyword">extends</span> <span class="token class-name">System</span> <span class="token punctuation">{</span>
  entities <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>
    q <span class="token operator">=&gt;</span> q<span class="token punctuation">.</span>current<span class="token punctuation">.</span><span class="token function">with</span><span class="token punctuation">(</span>Acceleration<span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">.</span>and<span class="token punctuation">.</span><span class="token function">with</span><span class="token punctuation">(</span>Position<span class="token punctuation">)</span><span class="token punctuation">.</span>write<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> entity <span class="token keyword">of</span> <span class="token keyword">this</span><span class="token punctuation">.</span>entities<span class="token punctuation">.</span>current<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> acceleration <span class="token operator">=</span> entity<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>Acceleration<span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span>
      <span class="token keyword">const</span> position <span class="token operator">=</span> entity<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>Position<span class="token punctuation">)</span><span class="token punctuation">;</span>
      position<span class="token punctuation">.</span>x <span class="token operator">+=</span> acceleration <span class="token operator">*</span> <span class="token keyword">this</span><span class="token punctuation">.</span>delta<span class="token punctuation">;</span>
      position<span class="token punctuation">.</span>y <span class="token operator">+=</span> acceleration <span class="token operator">*</span> <span class="token keyword">this</span><span class="token punctuation">.</span>delta<span class="token punctuation">;</span>
      position<span class="token punctuation">.</span>z <span class="token operator">+=</span> acceleration <span class="token operator">*</span> <span class="token keyword">this</span><span class="token punctuation">.</span>delta<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> world <span class="token operator">=</span> <span class="token keyword">await</span> World<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

world<span class="token punctuation">.</span><span class="token function">createEntity</span><span class="token punctuation">(</span>Position<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  world<span class="token punctuation">.</span><span class="token function">createEntity</span><span class="token punctuation">(</span>
    Acceleration<span class="token punctuation">,</span>
    Position<span class="token punctuation">,</span> <span class="token punctuation">{</span>x<span class="token operator">:</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">,</span> y<span class="token operator">:</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">,</span> z<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">}</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">await</span> world<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">requestAnimationFrame</span><span class="token punctuation">(</span>run<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h2 id="what-s-next" tabindex="-1">What&#39;s next? <a class="header-anchor" href="#what-s-next" aria-hidden="true">#</a></h2><p>This was a quick overview on how things are structured using Becsy, but we encourage you to read the <a href="./architecture/overview.html">architecture documentation</a> for more detailed information. You may also want to dig into some <a href="./examples/overview.html">more examples</a> or drop by our <a href="https://discord.gg/X72ct6hZSr" target="_blank" rel="noopener noreferrer">Discord channel</a> and say hi!</p>`,53);function u(i,k,r,d,y,m){const n=e("language-switcher");return o(),a("div",null,[t(n),l])}var f=s(c,[["render",u]]);export{w as __pageData,f as default};
