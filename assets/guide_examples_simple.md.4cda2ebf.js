import{_ as s,c as a,a as t,b as p,r as e,o}from"./app.b3a7bd64.js";var c="/becsy/assets/simple.553322c5.gif";const g='{"title":"Simple moving box","description":"","frontmatter":{},"headers":[{"level":2,"title":"Step 1 - The HTML file","slug":"step-1-the-html-file"},{"level":2,"title":"Step 2 - Set up the component types","slug":"step-2-set-up-the-component-types"},{"level":2,"title":"Step 3 - Set up the input system","slug":"step-3-set-up-the-input-system"},{"level":2,"title":"Step 4 - Set up the movement system","slug":"step-4-set-up-the-movement-system"},{"level":2,"title":"Step 5 - Set up the rendering system","slug":"step-5-set-up-the-rendering-system"},{"level":2,"title":"Step 6 - Set up the world","slug":"step-6-set-up-the-world"},{"level":2,"title":"Step 7 - Set up the game loop","slug":"step-7-set-up-the-game-loop"},{"level":2,"title":"Done!","slug":"done"}],"relativePath":"guide/examples/simple.md","lastUpdated":1658727082000}',l={},u=p(`<h1 id="simple-moving-box" tabindex="-1">Simple moving box <a class="header-anchor" href="#simple-moving-box" aria-hidden="true">#</a></h1><p>The following example will demonstrate how to implement a simple object that will move on keyboard input. It&#39;s strongly inspired by the nice example writeup from <a href="https://github.com/grebaldi/nopun-ecs" target="_blank" rel="noopener noreferrer">nopun-ecs</a> (under the <a href="https://github.com/grebaldi/nopun-ecs/blob/master/LICENSE" target="_blank" rel="noopener noreferrer">MIT license</a>).</p><p>This example doesn&#39;t show any advanced rendering techniques and if you plan on writing an actual game you should use a library like <a href="https://www.pixijs.com" target="_blank" rel="noopener noreferrer">PixiJS</a> or <a href="https://www.babylonjs.com/" target="_blank" rel="noopener noreferrer">BabylonJS</a> to do the graphics part. One of the benefits of an ECS architecture is that it&#39;s not bound to a specific rendering technique, and could be used in a lot of different environments.</p><h2 id="step-1-the-html-file" tabindex="-1">Step 1 - The HTML file <a class="header-anchor" href="#step-1-the-html-file" aria-hidden="true">#</a></h2><p>We create an HTML file that will display a blue box. This box will be the object that will be movable cursor keys. We use <a href="https://vitejs.dev/" target="_blank" rel="noopener noreferrer">Vite</a> to compile and serve our source but you can use any tool you&#39;d like.</p><div class="language-html only-ts"><pre><code><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Simple Becsy Demo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>viewport<span class="token punctuation">&quot;</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>width=device-width, initial-scale=1.0<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">
      <span class="token selector">body</span> <span class="token punctuation">{</span>
        <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>
        <span class="token property">padding</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
        <span class="token property">margin</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
      <span class="token punctuation">}</span>

      <span class="token selector">#object</span> <span class="token punctuation">{</span>
        <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>
        <span class="token property">width</span><span class="token punctuation">:</span> 60px<span class="token punctuation">;</span>
        <span class="token property">height</span><span class="token punctuation">:</span> 60px<span class="token punctuation">;</span>
        <span class="token property">background-color</span><span class="token punctuation">:</span> slateblue<span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>module<span class="token punctuation">&quot;</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>./src/main.ts<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
    <span class="token comment">&lt;!-- This is the object that our demo will move around the page. --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>object<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><div class="language-html only-js"><pre><code><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Simple Becsy Demo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>viewport<span class="token punctuation">&quot;</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>width=device-width, initial-scale=1.0<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">
      <span class="token selector">body</span> <span class="token punctuation">{</span>
        <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>
        <span class="token property">padding</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
        <span class="token property">margin</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
      <span class="token punctuation">}</span>

      <span class="token selector">#object</span> <span class="token punctuation">{</span>
        <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>
        <span class="token property">width</span><span class="token punctuation">:</span> 60px<span class="token punctuation">;</span>
        <span class="token property">height</span><span class="token punctuation">:</span> 60px<span class="token punctuation">;</span>
        <span class="token property">background-color</span><span class="token punctuation">:</span> slateblue<span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>module<span class="token punctuation">&quot;</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>./src/main.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
    <span class="token comment">&lt;!-- This is the object that our demo will move around the page. --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>object<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><h2 id="step-2-set-up-the-component-types" tabindex="-1">Step 2 - Set up the component types <a class="header-anchor" href="#step-2-set-up-the-component-types" aria-hidden="true">#</a></h2><p>For our source code proper, we first need a few components that hold the relevant data for us. Since we want an object to move, that object must have a position and a velocity. In order to translate those properties to the screen the object also needs a reference to its associated DOM node.</p><div class="language-ts"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span>component<span class="token punctuation">,</span> field<span class="token punctuation">,</span> Type<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@lastolivegames/becsy&#39;</span><span class="token punctuation">;</span>

<span class="token comment">// Component types are declared as classes and don&#39;t need to inherit from anything in particular.</span>
<span class="token comment">// We use the \`@component\` decorator to automatically register the component type with the world</span>
<span class="token comment">// (created below).</span>
<span class="token decorator"><span class="token at operator">@</span><span class="token function">component</span></span> <span class="token keyword">class</span> <span class="token class-name">Position</span> <span class="token punctuation">{</span>
  <span class="token comment">// Each property needs a low level backing field type, as Becsy uses raw array buffers to share</span>
  <span class="token comment">// data between workers (threads) rather than using objects to represent components.  To keep</span>
  <span class="token comment">// TypeScript happy, we also use \`declare\` to expose the high level JavaScript type of each</span>
  <span class="token comment">// property, whose implementation will be provided by Becsy.</span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">field</span></span><span class="token punctuation">.</span>float64 <span class="token keyword">declare</span> x<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">field</span></span><span class="token punctuation">.</span>float64 <span class="token keyword">declare</span> y<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token decorator"><span class="token at operator">@</span><span class="token function">component</span></span> <span class="token keyword">class</span> <span class="token class-name">Velocity</span> <span class="token punctuation">{</span>
  <span class="token comment">// Velocity is also a two floats vector just like Position, but we nonetheless define it as a</span>
  <span class="token comment">// separate component type.  Since an entity can have at most one instance of any given component</span>
  <span class="token comment">// type this will allow an entity to have both a Velocity and a Position.  We could reuse property</span>
  <span class="token comment">// names but prefer not to, as it will make code clearer later on.</span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">field</span></span><span class="token punctuation">.</span>float64 <span class="token keyword">declare</span> vx<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">field</span></span><span class="token punctuation">.</span>float64 <span class="token keyword">declare</span> vy<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token decorator"><span class="token at operator">@</span><span class="token function">component</span></span> <span class="token keyword">class</span> <span class="token class-name">DOMRenderable</span> <span class="token punctuation">{</span>
  <span class="token comment">// We&#39;ll need a reference to the DOM node we set up in the HTML file in order to manipulate it</span>
  <span class="token comment">// later on.</span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">field</span></span><span class="token punctuation">.</span>object <span class="token keyword">declare</span> node<span class="token operator">:</span> HTMLElement<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><div class="language-js"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span>Type<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@lastolivegames/becsy&#39;</span><span class="token punctuation">;</span>

<span class="token comment">// Component types are declared as classes and don&#39;t need to inherit from anything in particular.</span>
<span class="token keyword">class</span> <span class="token class-name">Position</span> <span class="token punctuation">{</span>
  <span class="token comment">// Each property needs a low level backing field type, as Becsy uses raw array buffers to share</span>
  <span class="token comment">// data between workers (threads) rather than using objects to represent components.  You declare</span>
  <span class="token comment">// these in a static schema property.</span>
  <span class="token keyword">static</span> schema <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">x</span><span class="token operator">:</span> Type<span class="token punctuation">.</span>float64<span class="token punctuation">,</span>
    <span class="token literal-property property">y</span><span class="token operator">:</span> Type<span class="token punctuation">.</span>float64
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">Velocity</span> <span class="token punctuation">{</span>
  <span class="token comment">// Velocity is also a two floats vector just like Position, but we nonetheless define it as a</span>
  <span class="token comment">// separate component type.  Since an entity can have at most one instance of any given component</span>
  <span class="token comment">// type this will allow an entity to have both a Velocity and a Position.  We could reuse property</span>
  <span class="token comment">// names but prefer not to, as it will make code clearer later on.</span>
  <span class="token keyword">static</span> schema <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">vx</span><span class="token operator">:</span> Type<span class="token punctuation">.</span>float64<span class="token punctuation">,</span>
    <span class="token literal-property property">vy</span><span class="token operator">:</span> Type<span class="token punctuation">.</span>float64
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">DOMRenderable</span> <span class="token punctuation">{</span>
  <span class="token comment">// We&#39;ll need a reference to the DOM node we set up in the HTML file in order to manipulate it</span>
  <span class="token comment">// later on.</span>
  <span class="token keyword">static</span> schema <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">node</span><span class="token operator">:</span> Type<span class="token punctuation">.</span>object
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><h2 id="step-3-set-up-the-input-system" tabindex="-1">Step 3 - Set up the input system <a class="header-anchor" href="#step-3-set-up-the-input-system" aria-hidden="true">#</a></h2><p>Like most games, our example is going to be processed sequentially on a frame-by-frame basis. Each execution cycle of the ECS calculates one frame. Unfortunately, this is not how input events are usually handled in the browser so we need a way to remedy that.</p><p>Our input system is going to remember every keystroke and remove that information again when a key is released. This way, we can easily check which key is currently pressed on every frame. Then we have a look at the arrow keys and transform the key names to the correct velocity values for our entity.</p><div class="language-ts"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span>component<span class="token punctuation">,</span> field<span class="token punctuation">,</span> system<span class="token punctuation">,</span> System<span class="token punctuation">,</span> Type<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@lastolivegames/becsy&#39;</span><span class="token punctuation">;</span>

<span class="token decorator"><span class="token at operator">@</span><span class="token function">component</span></span> <span class="token keyword">class</span> <span class="token class-name">Position</span> <span class="token punctuation">{</span><span class="token comment">/* ... */</span><span class="token punctuation">}</span>
<span class="token decorator"><span class="token at operator">@</span><span class="token function">component</span></span> <span class="token keyword">class</span> <span class="token class-name">Velocity</span> <span class="token punctuation">{</span><span class="token comment">/* ... */</span><span class="token punctuation">}</span>
<span class="token decorator"><span class="token at operator">@</span><span class="token function">component</span></span> <span class="token keyword">class</span> <span class="token class-name">DOMRenderable</span> <span class="token punctuation">{</span><span class="token comment">/* ... */</span><span class="token punctuation">}</span>


<span class="token comment">// Systems are declared as classes that extend \`System\`.  We use the \`@system\` decorator to</span>
<span class="token comment">// automatically register the system type with the world, and \`export\` them so the linter won&#39;t</span>
<span class="token comment">// complain about &quot;unused&quot; classes.</span>
<span class="token decorator"><span class="token at operator">@</span><span class="token function">system</span></span> <span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">VelocityInputController</span> <span class="token keyword">extends</span> <span class="token class-name">System</span> <span class="token punctuation">{</span>
  <span class="token comment">// Every system can define any number of queries whose results will be available in the \`execute\`</span>
  <span class="token comment">// method.  In this case, we&#39;re asking for all entities that currently have a Velocity component,</span>
  <span class="token comment">// and declare that we&#39;ll be writing to those components.</span>
  <span class="token keyword">private</span> <span class="token keyword">readonly</span> movables <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>q <span class="token operator">=&gt;</span> q<span class="token punctuation">.</span>current<span class="token punctuation">.</span><span class="token function">with</span><span class="token punctuation">(</span>Velocity<span class="token punctuation">)</span><span class="token punctuation">.</span>write<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// Here we&#39;ll store all keys that are currently pressed.  This is not specific to ECS but it&#39;s a</span>
  <span class="token comment">// common pattern to glue together event-driven (DOM) and timing-driven (ECS) processes.</span>
  <span class="token keyword">private</span> <span class="token keyword">readonly</span> keysPressed <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// Every system can provide an \`initialize\` method that will be called once as the world is being</span>
  <span class="token comment">// set up.  We&#39;ll use it to register our DOM event handlers.</span>
  <span class="token function">initialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>
    document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;keydown&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>event<span class="token operator">:</span> KeyboardEvent<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>keysPressed<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// add the pressed key to our set</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;keyup&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>event<span class="token operator">:</span> KeyboardEvent<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>keysPressed<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// remove the released key from our set</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// Every system can (and probably should) provide an \`execute\` method that implements its logic.</span>
  <span class="token comment">// It will be invoked once per frame in our demo, so at 60fps it&#39;s called 60 times per second.</span>
  <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>
    <span class="token comment">// We loop through the query results of the movables query we defined above.</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> movable <span class="token keyword">of</span> <span class="token keyword">this</span><span class="token punctuation">.</span>movables<span class="token punctuation">.</span>current<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// This is how we access the data stored in the Velocity component of our movable entity.</span>
      <span class="token comment">// We must specify whether we intend to only \`read\` the data or also to \`write\` it.  We&#39;ll</span>
      <span class="token comment">// only be allowed to \`write\` to component types that we reserved as such in our queries.</span>
      <span class="token keyword">const</span> velocity <span class="token operator">=</span> movable<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>Velocity<span class="token punctuation">)</span><span class="token punctuation">;</span>

      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>keysPressed<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span><span class="token string">&#39;ArrowUp&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> velocity<span class="token punctuation">.</span>vy <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">100</span><span class="token punctuation">;</span>  <span class="token comment">// in pixels per second</span>
      <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>keysPressed<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span><span class="token string">&#39;ArrowDown&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> velocity<span class="token punctuation">.</span>vy <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>
      <span class="token keyword">else</span> velocity<span class="token punctuation">.</span>vy <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>keysPressed<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span><span class="token string">&#39;ArrowLeft&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> velocity<span class="token punctuation">.</span>vx <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">100</span><span class="token punctuation">;</span>
      <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>keysPressed<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span><span class="token string">&#39;ArrowRight&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> velocity<span class="token punctuation">.</span>vx <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>
      <span class="token keyword">else</span> velocity<span class="token punctuation">.</span>vx <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><div class="language-js"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span>System<span class="token punctuation">,</span> Type<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@lastolivegames/becsy&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">Position</span> <span class="token punctuation">{</span><span class="token comment">/* ... */</span><span class="token punctuation">}</span>
<span class="token keyword">class</span> <span class="token class-name">Velocity</span> <span class="token punctuation">{</span><span class="token comment">/* ... */</span><span class="token punctuation">}</span>
<span class="token keyword">class</span> <span class="token class-name">DOMRenderable</span> <span class="token punctuation">{</span><span class="token comment">/* ... */</span><span class="token punctuation">}</span>


<span class="token comment">// Systems are declared as classes that extend \`System\`.</span>
<span class="token keyword">class</span> <span class="token class-name">VelocityInputController</span> <span class="token keyword">extends</span> <span class="token class-name">System</span> <span class="token punctuation">{</span>
  <span class="token comment">// Every system can define any number of queries whose results will be available in the \`execute\`</span>
  <span class="token comment">// method.  In this case, we&#39;re asking for all entities that currently have a Velocity component,</span>
  <span class="token comment">// and declare that we&#39;ll be writing to those components.</span>
  movables <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token parameter">q</span> <span class="token operator">=&gt;</span> q<span class="token punctuation">.</span>current<span class="token punctuation">.</span><span class="token function">with</span><span class="token punctuation">(</span>Velocity<span class="token punctuation">)</span><span class="token punctuation">.</span>write<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// Here we&#39;ll store all keys that are currently pressed.  This is not specific to ECS but it&#39;s a</span>
  <span class="token comment">// common pattern to glue together event-driven (DOM) and timing-driven (ECS) processes.</span>
  keysPressed <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// Every system can provide an \`initialize\` method that will be called once as the world is being</span>
  <span class="token comment">// set up.  We&#39;ll use it to register our DOM event handlers.</span>
  <span class="token function">initialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;keydown&#39;</span><span class="token punctuation">,</span> <span class="token parameter">event</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>keysPressed<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// add the pressed key to our set</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;keyup&#39;</span><span class="token punctuation">,</span> <span class="token parameter">event</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>keysPressed<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// remove the released key from our set</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// Every system can (and probably should) provide an \`execute\` method that implements its logic.</span>
  <span class="token comment">// It will be invoked once per frame in our demo, so at 60fps it&#39;s called 60 times per second.</span>
  <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// We loop through the query results of the movables query we defined above.</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> movable <span class="token keyword">of</span> <span class="token keyword">this</span><span class="token punctuation">.</span>movables<span class="token punctuation">.</span>current<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// This is how we access the data stored in the Velocity component of our movable entity.</span>
      <span class="token comment">// We must specify whether we intend to only \`read\` the data or also to \`write\` it.  We&#39;ll</span>
      <span class="token comment">// only be allowed to \`write\` to component types that we reserved as such in our queries.</span>
      <span class="token keyword">const</span> velocity <span class="token operator">=</span> movable<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>Velocity<span class="token punctuation">)</span><span class="token punctuation">;</span>

      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>keysPressed<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span><span class="token string">&#39;ArrowUp&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> velocity<span class="token punctuation">.</span>vy <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">100</span><span class="token punctuation">;</span>  <span class="token comment">// in pixels per second</span>
      <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>keysPressed<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span><span class="token string">&#39;ArrowDown&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> velocity<span class="token punctuation">.</span>vy <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>
      <span class="token keyword">else</span> velocity<span class="token punctuation">.</span>vy <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>keysPressed<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span><span class="token string">&#39;ArrowLeft&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> velocity<span class="token punctuation">.</span>vx <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">100</span><span class="token punctuation">;</span>
      <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>keysPressed<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span><span class="token string">&#39;ArrowRight&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> velocity<span class="token punctuation">.</span>vx <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>
      <span class="token keyword">else</span> velocity<span class="token punctuation">.</span>vx <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><h2 id="step-4-set-up-the-movement-system" tabindex="-1">Step 4 - Set up the movement system <a class="header-anchor" href="#step-4-set-up-the-movement-system" aria-hidden="true">#</a></h2><p>Next we need a system that updates every entity that has a position and a velocity, for the velocity change in step 3 to take effect.</p><div class="language-ts"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span>component<span class="token punctuation">,</span> field<span class="token punctuation">,</span> system<span class="token punctuation">,</span> System<span class="token punctuation">,</span> Type<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@lastolivegames/becsy&#39;</span><span class="token punctuation">;</span>

<span class="token decorator"><span class="token at operator">@</span><span class="token function">component</span></span> <span class="token keyword">class</span> <span class="token class-name">Position</span> <span class="token punctuation">{</span><span class="token comment">/* ... */</span><span class="token punctuation">}</span>
<span class="token decorator"><span class="token at operator">@</span><span class="token function">component</span></span> <span class="token keyword">class</span> <span class="token class-name">Velocity</span> <span class="token punctuation">{</span><span class="token comment">/* ... */</span><span class="token punctuation">}</span>
<span class="token decorator"><span class="token at operator">@</span><span class="token function">component</span></span> <span class="token keyword">class</span> <span class="token class-name">DOMRenderable</span> <span class="token punctuation">{</span><span class="token comment">/* ... */</span><span class="token punctuation">}</span>

<span class="token decorator"><span class="token at operator">@</span><span class="token function">system</span></span> <span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">VelocityInputController</span> <span class="token keyword">extends</span> <span class="token class-name">System</span> <span class="token punctuation">{</span><span class="token comment">/* ... */</span><span class="token punctuation">}</span>

<span class="token decorator"><span class="token at operator">@</span><span class="token function">system</span></span> <span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">Movement</span> <span class="token keyword">extends</span> <span class="token class-name">System</span> <span class="token punctuation">{</span>
  <span class="token comment">// In this query we&#39;re looking for every entity with both a \`Position\` and a \`Velocity\` component,</span>
  <span class="token comment">// but while we declare that we&#39;ll be writing to \`Position\` we&#39;ll only be reading from \`Velocity\`.</span>
  <span class="token comment">// Reading from \`Velocity\` will automatically make this system run after \`VelocityInputController\`</span>
  <span class="token comment">// which writes it, and writing to \`Position\` will put it before the \`Renderer\` which reads it.</span>
  <span class="token comment">// The order that systems are declared in doesn&#39;t matter.</span>
  <span class="token keyword">private</span> <span class="token keyword">readonly</span> movables <span class="token operator">=</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>q <span class="token operator">=&gt;</span> q<span class="token punctuation">.</span>current<span class="token punctuation">.</span><span class="token function">with</span><span class="token punctuation">(</span>Velocity<span class="token punctuation">)</span><span class="token punctuation">.</span>and<span class="token punctuation">.</span><span class="token function">with</span><span class="token punctuation">(</span>Position<span class="token punctuation">)</span><span class="token punctuation">.</span>write<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> movable <span class="token keyword">of</span> <span class="token keyword">this</span><span class="token punctuation">.</span>movables<span class="token punctuation">.</span>current<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// We retrive both velocity (to read) and position (to write) from our entities.</span>
      <span class="token keyword">const</span> velocity <span class="token operator">=</span> movable<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>Velocity<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">const</span> position <span class="token operator">=</span> movable<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>Position<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment">// In the execute method, a system has access to \`this.delta\`, which is the delta time between</span>
      <span class="token comment">// the current frame and the previous one.  This allows us to calculate a stable movement</span>
      <span class="token comment">// regardless of the intervals between our frames.  For more on that see</span>
      <span class="token comment">// https://drewcampbell92.medium.com/understanding-delta-time-b53bf4781a03.</span>
      position<span class="token punctuation">.</span>x <span class="token operator">+=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>delta <span class="token operator">*</span> velocity<span class="token punctuation">.</span>vx<span class="token punctuation">;</span>
      position<span class="token punctuation">.</span>y <span class="token operator">+=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>delta <span class="token operator">*</span> velocity<span class="token punctuation">.</span>vy<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><div class="language-js"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span>System<span class="token punctuation">,</span> Type<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@lastolivegames/becsy&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">Position</span> <span class="token punctuation">{</span><span class="token comment">/* ... */</span><span class="token punctuation">}</span>
<span class="token keyword">class</span> <span class="token class-name">Velocity</span> <span class="token punctuation">{</span><span class="token comment">/* ... */</span><span class="token punctuation">}</span>
<span class="token keyword">class</span> <span class="token class-name">DOMRenderable</span> <span class="token punctuation">{</span><span class="token comment">/* ... */</span><span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">VelocityInputController</span> <span class="token keyword">extends</span> <span class="token class-name">System</span> <span class="token punctuation">{</span><span class="token comment">/* ... */</span><span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">Movement</span> <span class="token keyword">extends</span> <span class="token class-name">System</span> <span class="token punctuation">{</span>
  <span class="token comment">// In this query we&#39;re looking for every entity with both a \`Position\` and a \`Velocity\` component,</span>
  <span class="token comment">// but while we declare that we&#39;ll be writing to \`Position\` we&#39;ll only be reading from \`Velocity\`.</span>
  <span class="token comment">// Reading from \`Velocity\` will automatically make this system run after \`VelocityInputController\`</span>
  <span class="token comment">// which writes it, and writing to \`Position\` will put it before the \`Renderer\` which reads it.</span>
  <span class="token comment">// The order that systems are declared in doesn&#39;t matter.</span>
  movables <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token parameter">q</span> <span class="token operator">=&gt;</span> q<span class="token punctuation">.</span>current<span class="token punctuation">.</span><span class="token function">with</span><span class="token punctuation">(</span>Velocity<span class="token punctuation">)</span><span class="token punctuation">.</span>and<span class="token punctuation">.</span><span class="token function">with</span><span class="token punctuation">(</span>Position<span class="token punctuation">)</span><span class="token punctuation">.</span>write<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> movable <span class="token keyword">of</span> <span class="token keyword">this</span><span class="token punctuation">.</span>movables<span class="token punctuation">.</span>current<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// We retrive both velocity (to read) and position (to write) from our entities.</span>
      <span class="token keyword">const</span> velocity <span class="token operator">=</span> movable<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>Velocity<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">const</span> position <span class="token operator">=</span> movable<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>Position<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment">// In the execute method, a system has access to \`this.delta\`, which is the delta time between</span>
      <span class="token comment">// the current frame and the previous one.  This allows us to calculate a stable movement</span>
      <span class="token comment">// regardless of the intervals between our frames.  For more on that see</span>
      <span class="token comment">// https://drewcampbell92.medium.com/understanding-delta-time-b53bf4781a03.</span>
      position<span class="token punctuation">.</span>x <span class="token operator">+=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>delta <span class="token operator">*</span> velocity<span class="token punctuation">.</span>vx<span class="token punctuation">;</span>
      position<span class="token punctuation">.</span>y <span class="token operator">+=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>delta <span class="token operator">*</span> velocity<span class="token punctuation">.</span>vy<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><h2 id="step-5-set-up-the-rendering-system" tabindex="-1">Step 5 - Set up the rendering system <a class="header-anchor" href="#step-5-set-up-the-rendering-system" aria-hidden="true">#</a></h2><p>The last system will take care of translating the position of our entity to its DOM node, so we can see the change on screen.</p><div class="language-ts"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span>component<span class="token punctuation">,</span> field<span class="token punctuation">,</span> system<span class="token punctuation">,</span> System<span class="token punctuation">,</span> Type<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@lastolivegames/becsy&#39;</span><span class="token punctuation">;</span>

<span class="token decorator"><span class="token at operator">@</span><span class="token function">component</span></span> <span class="token keyword">class</span> <span class="token class-name">Position</span> <span class="token punctuation">{</span><span class="token comment">/* ... */</span><span class="token punctuation">}</span>
<span class="token decorator"><span class="token at operator">@</span><span class="token function">component</span></span> <span class="token keyword">class</span> <span class="token class-name">Velocity</span> <span class="token punctuation">{</span><span class="token comment">/* ... */</span><span class="token punctuation">}</span>
<span class="token decorator"><span class="token at operator">@</span><span class="token function">component</span></span> <span class="token keyword">class</span> <span class="token class-name">DOMRenderable</span> <span class="token punctuation">{</span><span class="token comment">/* ... */</span><span class="token punctuation">}</span>

<span class="token decorator"><span class="token at operator">@</span><span class="token function">system</span></span> <span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">VelocityInputController</span> <span class="token keyword">extends</span> <span class="token class-name">System</span> <span class="token punctuation">{</span><span class="token comment">/* ... */</span><span class="token punctuation">}</span>
<span class="token decorator"><span class="token at operator">@</span><span class="token function">system</span></span> <span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">Movement</span> <span class="token keyword">extends</span> <span class="token class-name">System</span> <span class="token punctuation">{</span><span class="token comment">/* ... */</span><span class="token punctuation">}</span>

<span class="token decorator"><span class="token at operator">@</span><span class="token function">system</span></span> <span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">Renderer</span> <span class="token keyword">extends</span> <span class="token class-name">System</span> <span class="token punctuation">{</span>
  <span class="token comment">// This system will render any entity that has both a Position and a DOMRenderable component, and</span>
  <span class="token comment">// that is new or whose position changed since the last frame. Note that we don&#39;t need to declare</span>
  <span class="token comment">// DOMRenderable as writable since we&#39;ll be modifying the DOM element&#39;s properties rather than</span>
  <span class="token comment">// updating the component&#39;s fields, and Becsy doesn&#39;t track that.</span>
  <span class="token keyword">private</span> <span class="token keyword">readonly</span> renderables <span class="token operator">=</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>q <span class="token operator">=&gt;</span> q<span class="token punctuation">.</span>addedOrChanged<span class="token punctuation">.</span><span class="token function">with</span><span class="token punctuation">(</span>DOMRenderable<span class="token punctuation">)</span><span class="token punctuation">.</span>and<span class="token punctuation">.</span><span class="token function">with</span><span class="token punctuation">(</span>Position<span class="token punctuation">)</span><span class="token punctuation">.</span>track<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> renderable <span class="token keyword">of</span> <span class="token keyword">this</span><span class="token punctuation">.</span>renderables<span class="token punctuation">.</span>addedOrChanged<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> <span class="token punctuation">{</span>x<span class="token punctuation">,</span> y<span class="token punctuation">}</span> <span class="token operator">=</span> renderable<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>Position<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">const</span> <span class="token punctuation">{</span>node<span class="token punctuation">}</span> <span class="token operator">=</span> renderable<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>DOMRenderable<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment">// Sync the node&#39;s position from the entity by setting its style.</span>
      node<span class="token punctuation">.</span>style<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>x<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">px</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
      node<span class="token punctuation">.</span>style<span class="token punctuation">.</span>top <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>y<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">px</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><div class="language-js"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span>System<span class="token punctuation">,</span> Type<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@lastolivegames/becsy&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">Position</span> <span class="token punctuation">{</span><span class="token comment">/* ... */</span><span class="token punctuation">}</span>
<span class="token keyword">class</span> <span class="token class-name">Velocity</span> <span class="token punctuation">{</span><span class="token comment">/* ... */</span><span class="token punctuation">}</span>
<span class="token keyword">class</span> <span class="token class-name">DOMRenderable</span> <span class="token punctuation">{</span><span class="token comment">/* ... */</span><span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">VelocityInputController</span> <span class="token keyword">extends</span> <span class="token class-name">System</span> <span class="token punctuation">{</span><span class="token comment">/* ... */</span><span class="token punctuation">}</span>
<span class="token keyword">class</span> <span class="token class-name">Movement</span> <span class="token keyword">extends</span> <span class="token class-name">System</span> <span class="token punctuation">{</span><span class="token comment">/* ... */</span><span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">Renderer</span> <span class="token keyword">extends</span> <span class="token class-name">System</span> <span class="token punctuation">{</span>
  <span class="token comment">// This system will render any entity that has both a Position and a DOMRenderable component, and</span>
  <span class="token comment">// that is new or whose position changed since the last frame. Note that we don&#39;t need to declare</span>
  <span class="token comment">// DOMRenderable as writable since we&#39;ll be modifying the DOM element&#39;s properties rather than</span>
  <span class="token comment">// updating the component&#39;s fields, and Becsy doesn&#39;t track that.</span>
  renderables <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token parameter">q</span> <span class="token operator">=&gt;</span> q<span class="token punctuation">.</span>addedOrChanged<span class="token punctuation">.</span><span class="token function">with</span><span class="token punctuation">(</span>DOMRenderable<span class="token punctuation">)</span><span class="token punctuation">.</span>and<span class="token punctuation">.</span><span class="token function">with</span><span class="token punctuation">(</span>Position<span class="token punctuation">)</span><span class="token punctuation">.</span>track<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> renderable <span class="token keyword">of</span> <span class="token keyword">this</span><span class="token punctuation">.</span>renderables<span class="token punctuation">.</span>addedOrChanged<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> <span class="token punctuation">{</span>x<span class="token punctuation">,</span> y<span class="token punctuation">}</span> <span class="token operator">=</span> renderable<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>Position<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">const</span> <span class="token punctuation">{</span>node<span class="token punctuation">}</span> <span class="token operator">=</span> renderable<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>DOMRenderable<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment">// Sync the node&#39;s position from the entity by setting its style.</span>
      node<span class="token punctuation">.</span>style<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>x<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">px</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
      node<span class="token punctuation">.</span>style<span class="token punctuation">.</span>top <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>y<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">px</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><h2 id="step-6-set-up-the-world" tabindex="-1">Step 6 - Set up the world <a class="header-anchor" href="#step-6-set-up-the-world" aria-hidden="true">#</a></h2><p>Now we have all the parts in place and it&#39;s time to stitch them together. We create a world, which automatically picks up all the <code>@component</code>s and <code>@system</code>s declared earlier. Then we create an entity with all 3 of our components in it.</p><div class="language-ts"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span>component<span class="token punctuation">,</span> field<span class="token punctuation">,</span> system<span class="token punctuation">,</span> System<span class="token punctuation">,</span> Type<span class="token punctuation">,</span> World<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@lastolivegames/becsy&#39;</span><span class="token punctuation">;</span>

<span class="token decorator"><span class="token at operator">@</span><span class="token function">component</span></span> <span class="token keyword">class</span> <span class="token class-name">Position</span> <span class="token punctuation">{</span><span class="token comment">/* ... */</span><span class="token punctuation">}</span>
<span class="token decorator"><span class="token at operator">@</span><span class="token function">component</span></span> <span class="token keyword">class</span> <span class="token class-name">Velocity</span> <span class="token punctuation">{</span><span class="token comment">/* ... */</span><span class="token punctuation">}</span>
<span class="token decorator"><span class="token at operator">@</span><span class="token function">component</span></span> <span class="token keyword">class</span> <span class="token class-name">DOMRenderable</span> <span class="token punctuation">{</span><span class="token comment">/* ... */</span><span class="token punctuation">}</span>

<span class="token decorator"><span class="token at operator">@</span><span class="token function">system</span></span> <span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">VelocityInputController</span> <span class="token keyword">extends</span> <span class="token class-name">System</span> <span class="token punctuation">{</span><span class="token comment">/* ... */</span><span class="token punctuation">}</span>
<span class="token decorator"><span class="token at operator">@</span><span class="token function">system</span></span> <span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">Movement</span> <span class="token keyword">extends</span> <span class="token class-name">System</span> <span class="token punctuation">{</span><span class="token comment">/* ... */</span><span class="token punctuation">}</span>
<span class="token decorator"><span class="token at operator">@</span><span class="token function">system</span></span> <span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">Renderer</span> <span class="token keyword">extends</span> <span class="token class-name">System</span> <span class="token punctuation">{</span><span class="token comment">/* ... */</span><span class="token punctuation">}</span>

<span class="token comment">// We can now create the world that all our entities and their components will live in.  All system</span>
<span class="token comment">// and component classes tagged with \`@system\` and \`@component\` will be automatically added to the</span>
<span class="token comment">// world&#39;s \`defs\`, and in this case we don&#39;t need to add any other types manually.</span>
<span class="token keyword">const</span> world <span class="token operator">=</span> <span class="token keyword">await</span> World<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Now we create the entity that will represent our object and add the components it will need.</span>
<span class="token comment">// Each component type can be optionally followed by an object with initial field values.</span>
world<span class="token punctuation">.</span><span class="token function">createEntity</span><span class="token punctuation">(</span>Position<span class="token punctuation">,</span> Velocity<span class="token punctuation">,</span> DOMRenderable<span class="token punctuation">,</span> <span class="token punctuation">{</span>node<span class="token operator">:</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;object&#39;</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><div class="language-js"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span>System<span class="token punctuation">,</span> Type<span class="token punctuation">,</span> World<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@lastolivegames/becsy&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">Position</span> <span class="token punctuation">{</span><span class="token comment">/* ... */</span><span class="token punctuation">}</span>
<span class="token keyword">class</span> <span class="token class-name">Velocity</span> <span class="token punctuation">{</span><span class="token comment">/* ... */</span><span class="token punctuation">}</span>
<span class="token keyword">class</span> <span class="token class-name">DOMRenderable</span> <span class="token punctuation">{</span><span class="token comment">/* ... */</span><span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">VelocityInputController</span> <span class="token keyword">extends</span> <span class="token class-name">System</span> <span class="token punctuation">{</span><span class="token comment">/* ... */</span><span class="token punctuation">}</span>
<span class="token keyword">class</span> <span class="token class-name">Movement</span> <span class="token keyword">extends</span> <span class="token class-name">System</span> <span class="token punctuation">{</span><span class="token comment">/* ... */</span><span class="token punctuation">}</span>
<span class="token keyword">class</span> <span class="token class-name">Renderer</span> <span class="token keyword">extends</span> <span class="token class-name">System</span> <span class="token punctuation">{</span><span class="token comment">/* ... */</span><span class="token punctuation">}</span>

<span class="token comment">// We can now create the world that all our entities and their components will live in.  We list</span>
<span class="token comment">// every component and system class in the \`defs\` option, in any order.</span>
<span class="token keyword">const</span> world <span class="token operator">=</span> <span class="token keyword">await</span> World<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">defs</span><span class="token operator">:</span> <span class="token punctuation">[</span>Position<span class="token punctuation">,</span> Velocity<span class="token punctuation">,</span> DOMRenderable<span class="token punctuation">,</span> VelocityInputController<span class="token punctuation">,</span> Movement<span class="token punctuation">,</span> Renderer<span class="token punctuation">]</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Now we create the entity that will represent our object and add the components it will need.</span>
<span class="token comment">// Each component type can be optionally followed by an object with initial field values.</span>
world<span class="token punctuation">.</span><span class="token function">createEntity</span><span class="token punctuation">(</span>Position<span class="token punctuation">,</span> Velocity<span class="token punctuation">,</span> DOMRenderable<span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token literal-property property">node</span><span class="token operator">:</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;object&#39;</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h2 id="step-7-set-up-the-game-loop" tabindex="-1">Step 7 - Set up the game loop <a class="header-anchor" href="#step-7-set-up-the-game-loop" aria-hidden="true">#</a></h2><p>Last but not least we implement a basic game loop using <code>requestAnimationFrame</code> and execute our world within that loop.</p><div class="language-ts"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span>component<span class="token punctuation">,</span> field<span class="token punctuation">,</span> system<span class="token punctuation">,</span> System<span class="token punctuation">,</span> Type<span class="token punctuation">,</span> World<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@lastolivegames/becsy&#39;</span><span class="token punctuation">;</span>

<span class="token decorator"><span class="token at operator">@</span><span class="token function">component</span></span> <span class="token keyword">class</span> <span class="token class-name">Position</span> <span class="token punctuation">{</span><span class="token comment">/* ... */</span><span class="token punctuation">}</span>
<span class="token decorator"><span class="token at operator">@</span><span class="token function">component</span></span> <span class="token keyword">class</span> <span class="token class-name">Velocity</span> <span class="token punctuation">{</span><span class="token comment">/* ... */</span><span class="token punctuation">}</span>
<span class="token decorator"><span class="token at operator">@</span><span class="token function">component</span></span> <span class="token keyword">class</span> <span class="token class-name">DOMRenderable</span> <span class="token punctuation">{</span><span class="token comment">/* ... */</span><span class="token punctuation">}</span>

<span class="token decorator"><span class="token at operator">@</span><span class="token function">system</span></span> <span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">VelocityInputController</span> <span class="token keyword">extends</span> <span class="token class-name">System</span> <span class="token punctuation">{</span><span class="token comment">/* ... */</span><span class="token punctuation">}</span>
<span class="token decorator"><span class="token at operator">@</span><span class="token function">system</span></span> <span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">Movement</span> <span class="token keyword">extends</span> <span class="token class-name">System</span> <span class="token punctuation">{</span><span class="token comment">/* ... */</span><span class="token punctuation">}</span>
<span class="token decorator"><span class="token at operator">@</span><span class="token function">system</span></span> <span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">Renderer</span> <span class="token keyword">extends</span> <span class="token class-name">System</span> <span class="token punctuation">{</span><span class="token comment">/* ... */</span><span class="token punctuation">}</span>

<span class="token keyword">const</span> world <span class="token operator">=</span> <span class="token keyword">await</span> World<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">/* ... */</span>

<span class="token comment">// Finally, we set up our game loop.  The \`run\` function will be executed once per frame.</span>
<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// Execute the world, which will call the \`execute\` method of all systems in sequence.  The call</span>
  <span class="token comment">// is asynchronous and we _must_ await its result, otherwise errors won&#39;t be reported properly.</span>
  <span class="token keyword">await</span> world<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// Continue the loop on the next animation frame.</span>
  <span class="token function">requestAnimationFrame</span><span class="token punctuation">(</span>run<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// Kick things off with our first frame!</span>
<span class="token function">requestAnimationFrame</span><span class="token punctuation">(</span>run<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><div class="language-js"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span>System<span class="token punctuation">,</span> Type<span class="token punctuation">,</span> World<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@lastolivegames/becsy&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">Position</span> <span class="token punctuation">{</span><span class="token comment">/* ... */</span><span class="token punctuation">}</span>
<span class="token keyword">class</span> <span class="token class-name">Velocity</span> <span class="token punctuation">{</span><span class="token comment">/* ... */</span><span class="token punctuation">}</span>
<span class="token keyword">class</span> <span class="token class-name">DOMRenderable</span> <span class="token punctuation">{</span><span class="token comment">/* ... */</span><span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">VelocityInputController</span> <span class="token keyword">extends</span> <span class="token class-name">System</span> <span class="token punctuation">{</span><span class="token comment">/* ... */</span><span class="token punctuation">}</span>
<span class="token keyword">class</span> <span class="token class-name">Movement</span> <span class="token keyword">extends</span> <span class="token class-name">System</span> <span class="token punctuation">{</span><span class="token comment">/* ... */</span><span class="token punctuation">}</span>
<span class="token keyword">class</span> <span class="token class-name">Renderer</span> <span class="token keyword">extends</span> <span class="token class-name">System</span> <span class="token punctuation">{</span><span class="token comment">/* ... */</span><span class="token punctuation">}</span>

<span class="token keyword">const</span> world <span class="token operator">=</span> <span class="token keyword">await</span> World<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token comment">/* ... */</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">/* ... */</span>

<span class="token comment">// Finally, we set up our game loop.  The \`run\` function will be executed once per frame.</span>
<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// Execute the world, which will call the \`execute\` method of all systems in sequence.  The call</span>
  <span class="token comment">// is asynchronous and we _must_ await its result, otherwise errors won&#39;t be reported properly.</span>
  <span class="token keyword">await</span> world<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// Continue the loop on the next animation frame.</span>
  <span class="token function">requestAnimationFrame</span><span class="token punctuation">(</span>run<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// Kick things off with our first frame!</span>
<span class="token function">requestAnimationFrame</span><span class="token punctuation">(</span>run<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h2 id="done" tabindex="-1">Done! <a class="header-anchor" href="#done" aria-hidden="true">#</a></h2><p>The result should look like this:</p><p><img src="`+c+'" alt="Screen capture of demo"></p><div class="only-ts"><p>You can check out the full example, including the necessary build setup, in <a href="https://github.com/lastolivegames/becsy/blob/master/examples/simple">examples/simple</a>.</p></div><div class="only-js"><p>You can check out the full example, including the necessary build setup, in <a href="https://github.com/lastolivegames/becsy/blob/master/examples/simple-js">examples/simple-js</a>.</p></div>',37);function k(i,r,m,d,y,h){const n=e("language-switcher");return o(),a("div",null,[t(n),u])}var f=s(l,[["render",k]]);export{g as __pageData,f as default};
